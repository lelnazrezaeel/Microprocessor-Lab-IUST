
AVRASM ver. 2.1.30  E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm Tue Jun 06 20:14:21 2023

E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1096): warning: Register r12 already defined by the .DEF directive
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF _counter_msb=R5
                 	.DEF _index=R6
                 	.DEF _index_msb=R7
                 	.DEF _last_op=R8
                 	.DEF _last_op_msb=R9
                 	.DEF _result=R10
                 	.DEF _result_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G103:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G103:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0001
000036 0000      	.DB  0x1,0x0,0x0,0x0
                 
                 _0x0:
000037 7265
000038 6f72
000039 0072
00003a 6425      	.DB  0x65,0x72,0x72,0x6F,0x72,0x0,0x25,0x64
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1141): warning: .cseg .db misalignment - padding zero byte
00003b 0000      	.DB  0x0
                 _0x2000003:
00003c c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1145): warning: .cseg .db misalignment - padding zero byte
00003d 0001      	.DB  0x1
                 _0x2020000:
00003e 4e2d
00003f 4e41
000040 4900
000041 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\University\Term8\MP_lab\Homeworks\HW8\Debug\List\HW8.asm(1148): warning: .cseg .db misalignment - padding zero byte
000042 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000043 0008      	.DW  0x08
000044 0004      	.DW  0x04
000045 0066      	.DW  __REG_VARS*2
                 
000046 0006      	.DW  0x06
000047 0260      	.DW  _0x11
000048 006e      	.DW  _0x0*2
                 
000049 0002      	.DW  0x02
00004a 02ce      	.DW  __base_y_G100
00004b 0078      	.DW  _0x2000003*2
                 
00004c 0001      	.DW  0x01
00004d 02d5      	.DW  __seed_G101
00004e 007a      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bffb      	OUT  GICR,R31
000055 bfeb      	OUT  GICR,R30
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 007d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;// Elnaz Rezaee 98411387
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <math.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;
                 ;#define KEYPAD_R1 PORTD .0
                 ;#define KEYPAD_R2 PORTD .1
                 ;#define KEYPAD_R3 PORTD .2
                 ;#define KEYPAD_R4 PORTD .3
                 ;#define KEYPAD_C1 PIND .4
                 ;#define KEYPAD_C2 PIND .5
                 ;#define KEYPAD_C3 PIND .6
                 ;#define KEYPAD_C4 PIND .7
                 ;
                 ;#define KEYPAD_NUM0 0
                 ;#define KEYPAD_NUM1 1
                 ;#define KEYPAD_NUM2 2
                 ;#define KEYPAD_NUM3 3
                 ;#define KEYPAD_NUM4 4
                 ;#define KEYPAD_NUM5 5
                 ;#define KEYPAD_NUM6 6
                 ;#define KEYPAD_NUM7 7
                 ;#define KEYPAD_NUM8 8
                 ;#define KEYPAD_NUM9 9
                 ;
                 ;#define KEYPAD_DIV '/'
                 ;#define KEYPAD_MUL '*'
                 ;#define KEYPAD_SUB '-'
                 ;#define KEYPAD_ADD '+'
                 ;
                 ;#define KEYPAD_EQ '='
                 ;#define KEYPAD_ON 'c'
                 ;
                 ;unsigned char keypad_scan();
                 ;void calculate();
                 ;float number[10];
                 ;float opert[10];
                 ;char result_char[20];
                 ;int counter = 0;
                 ;int index = 0;
                 ;int last_op = 1;
                 ;int result = 0;
                 ;int i, j;
                 ;int error = 0;
                 ;void main(void)
                 ; 0000 0033 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0034     unsigned char key_res;
                 ; 0000 0035     DDRC = 0xFF;
                 ;	key_res -> R17
00007d efef      	LDI  R30,LOW(255)
00007e bbe4      	OUT  0x14,R30
                 ; 0000 0036     DDRD = 0x0F;
00007f e0ef      	LDI  R30,LOW(15)
000080 bbe1      	OUT  0x11,R30
                 ; 0000 0037     PORTC = 0x00;
000081 e0e0      	LDI  R30,LOW(0)
000082 bbe5      	OUT  0x15,R30
                 ; 0000 0038     lcd_init(16);
000083 e1a0      	LDI  R26,LOW(16)
000084 940e 02f8 	CALL _lcd_init
                 ; 0000 0039     lcd_clear();
000086 940e 02b9 	CALL _lcd_clear
                 ; 0000 003A 
                 ; 0000 003B     while (1)
                 _0x3:
                 ; 0000 003C     {
                 ; 0000 003D         key_res = keypad_scan();
000088 d1aa      	RCALL _keypad_scan
000089 2f1e      	MOV  R17,R30
                 ; 0000 003E 
                 ; 0000 003F         if (key_res != 255)
00008a 3f1f      	CPI  R17,255
00008b f409      	BRNE PC+2
00008c c0a3      	RJMP _0x6
                 ; 0000 0040         {
                 ; 0000 0041             while (keypad_scan() != 255)
                 _0x7:
00008d d1a5      	RCALL _keypad_scan
00008e 3fef      	CPI  R30,LOW(0xFF)
00008f f7e9      	BRNE _0x7
                 ; 0000 0042                 ;
                 ; 0000 0043             delay_ms(20);
000090 e1a4      	LDI  R26,LOW(20)
000091 e0b0      	LDI  R27,0
000092 940e 05ba 	CALL _delay_ms
                 ; 0000 0044 
                 ; 0000 0045             if (key_res < 10)
000094 301a      	CPI  R17,10
000095 f568      	BRSH _0xA
                 ; 0000 0046             {
                 ; 0000 0047                 last_op = 0;
000096 2488      	CLR  R8
000097 2499      	CLR  R9
                 ; 0000 0048                 lcd_putchar(key_res + 48);
000098 2fa1      	MOV  R26,R17
000099 5da0      	SUBI R26,-LOW(48)
00009a 940e 02c7 	CALL _lcd_putchar
                 ; 0000 0049                 number[counter] *= 10;
00009c 940e 04f7 	CALL SUBOPT_0x0
00009e 93ff      	PUSH R31
00009f 93ef      	PUSH R30
0000a0 01df      	MOVW R26,R30
0000a1 940e 0770 	CALL __GETD1P
                +
0000a3 e0a0     +LDI R26 , LOW ( 0x41200000 )
0000a4 e0b0     +LDI R27 , HIGH ( 0x41200000 )
0000a5 e280     +LDI R24 , BYTE3 ( 0x41200000 )
0000a6 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
0000a7 940e 06b4 	CALL __MULF12
0000a9 91af      	POP  R26
0000aa 91bf      	POP  R27
0000ab 940e 0776 	CALL __PUTDP1
                 ; 0000 004A                 number[counter] += key_res;
0000ad 940e 04f7 	CALL SUBOPT_0x0
0000af 93ff      	PUSH R31
0000b0 93ef      	PUSH R30
0000b1 01df      	MOVW R26,R30
0000b2 940e 0770 	CALL __GETD1P
0000b4 01df      	MOVW R26,R30
0000b5 01cb      	MOVW R24,R22
0000b6 2fe1      	MOV  R30,R17
0000b7 e0f0      	LDI  R31,0
0000b8 940e 0767 	CALL __CWD1
0000ba 940e 062a 	CALL __CDF1
0000bc 940e 0664 	CALL __ADDF12
0000be 91af      	POP  R26
0000bf 91bf      	POP  R27
0000c0 940e 0776 	CALL __PUTDP1
                 ; 0000 004B             }
                 ; 0000 004C             else if (last_op == 0 || key_res == KEYPAD_ON)
0000c2 c06d      	RJMP _0xB
                 _0xA:
0000c3 2400      	CLR  R0
0000c4 1408      	CP   R0,R8
0000c5 0409      	CPC  R0,R9
0000c6 f019      	BREQ _0xD
0000c7 3613      	CPI  R17,99
0000c8 f009      	BREQ _0xD
0000c9 c066      	RJMP _0xC
                 _0xD:
                 ; 0000 004D             {
                 ; 0000 004E                 if (key_res == KEYPAD_EQ)
0000ca 331d      	CPI  R17,61
0000cb f559      	BRNE _0xF
                 ; 0000 004F                 {
                 ; 0000 0050                     last_op = 1;
0000cc 940e 04ff 	CALL SUBOPT_0x1
                 ; 0000 0051                     lcd_putchar(key_res);
                 ; 0000 0052                     calculate();
0000ce d063      	RCALL _calculate
                 ; 0000 0053                     if (error == 1)
0000cf 91a0 02cc 	LDS  R26,_error
0000d1 91b0 02cd 	LDS  R27,_error+1
0000d3 9711      	SBIW R26,1
0000d4 f441      	BRNE _0x10
                 ; 0000 0054                     {
                 ; 0000 0055                         lcd_gotoxy(0, 1);
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93ea      	ST   -Y,R30
0000d7 e0a1      	LDI  R26,LOW(1)
0000d8 940e 02a8 	CALL _lcd_gotoxy
                 ; 0000 0056                         lcd_puts("error");
                +
0000da e6a0     +LDI R26 , LOW ( _0x11 + ( 0 ) )
0000db e0b2     +LDI R27 , HIGH ( _0x11 + ( 0 ) )
                 	__POINTW2MN _0x11,0
0000dc c017      	RJMP _0x70
                 ; 0000 0057                     }
                 ; 0000 0058                     else
                 _0x10:
                 ; 0000 0059                     {
                 ; 0000 005A                         sprintf(result_char, "%d", result);
0000dd ebe6      	LDI  R30,LOW(_result_char)
0000de e0f2      	LDI  R31,HIGH(_result_char)
0000df 93fa      	ST   -Y,R31
0000e0 93ea      	ST   -Y,R30
                +
0000e1 e7e4     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0000e2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0000e3 93fa      	ST   -Y,R31
0000e4 93ea      	ST   -Y,R30
0000e5 01f5      	MOVW R30,R10
0000e6 940e 0767 	CALL __CWD1
0000e8 940e 077f 	CALL __PUTPARD1
0000ea e084      	LDI  R24,4
0000eb 940e 049a 	CALL _sprintf
0000ed 9628      	ADIW R28,8
                 ; 0000 005B                         lcd_gotoxy(0, 1);
0000ee e0e0      	LDI  R30,LOW(0)
0000ef 93ea      	ST   -Y,R30
0000f0 e0a1      	LDI  R26,LOW(1)
0000f1 d1b6      	RCALL _lcd_gotoxy
                 ; 0000 005C                         lcd_puts(result_char);
0000f2 eba6      	LDI  R26,LOW(_result_char)
0000f3 e0b2      	LDI  R27,HIGH(_result_char)
                 _0x70:
0000f4 940e 02e7 	CALL _lcd_puts
                 ; 0000 005D                     }
                 ; 0000 005E                 }
                 ; 0000 005F                 else if (key_res == KEYPAD_ON)
0000f6 c039      	RJMP _0x13
                 _0xF:
0000f7 3613      	CPI  R17,99
0000f8 f511      	BRNE _0x14
                 ; 0000 0060                 {
                 ; 0000 0061                     lcd_clear();
0000f9 d1bf      	RCALL _lcd_clear
                 ; 0000 0062                     lcd_gotoxy(0, 0);
0000fa e0e0      	LDI  R30,LOW(0)
0000fb 93ea      	ST   -Y,R30
0000fc e0a0      	LDI  R26,LOW(0)
0000fd d1aa      	RCALL _lcd_gotoxy
                 ; 0000 0063                     lcd_clear();
0000fe d1ba      	RCALL _lcd_clear
                 ; 0000 0064                     memset(number, 0, 10 * sizeof(int));
0000ff e6e6      	LDI  R30,LOW(_number)
000100 e0f2      	LDI  R31,HIGH(_number)
000101 93fa      	ST   -Y,R31
000102 93ea      	ST   -Y,R30
000103 e0e0      	LDI  R30,LOW(0)
000104 93ea      	ST   -Y,R30
000105 e1a4      	LDI  R26,LOW(20)
000106 e0b0      	LDI  R27,0
000107 940e 04ce 	CALL _memset
                 ; 0000 0065                     memset(opert, '\0', 10 * sizeof(char));
000109 e8ee      	LDI  R30,LOW(_opert)
00010a e0f2      	LDI  R31,HIGH(_opert)
00010b 93fa      	ST   -Y,R31
00010c 93ea      	ST   -Y,R30
00010d e0e0      	LDI  R30,LOW(0)
00010e 93ea      	ST   -Y,R30
00010f e0aa      	LDI  R26,LOW(10)
000110 e0b0      	LDI  R27,0
000111 940e 04ce 	CALL _memset
                 ; 0000 0066                     index = 0;
000113 2466      	CLR  R6
000114 2477      	CLR  R7
                 ; 0000 0067                     counter = 0;
000115 2444      	CLR  R4
000116 2455      	CLR  R5
                 ; 0000 0068                     last_op = 1;
000117 e0e1      	LDI  R30,LOW(1)
000118 e0f0      	LDI  R31,HIGH(1)
000119 014f      	MOVW R8,R30
                 ; 0000 0069                 }
                 ; 0000 006A                 else
00011a c015      	RJMP _0x15
                 _0x14:
                 ; 0000 006B                 {
                 ; 0000 006C                     last_op = 1;
00011b 940e 04ff 	CALL SUBOPT_0x1
                 ; 0000 006D                     lcd_putchar(key_res);
                 ; 0000 006E                     counter++;
00011d 01f2      	MOVW R30,R4
00011e 9631      	ADIW R30,1
00011f 012f      	MOVW R4,R30
                 ; 0000 006F                     opert[index] = key_res;
000120 01f3      	MOVW R30,R6
000121 940e 0505 	CALL SUBOPT_0x2
000123 0fae      	ADD  R26,R30
000124 1fbf      	ADC  R27,R31
000125 2fe1      	MOV  R30,R17
000126 27ff      	CLR  R31
000127 2766      	CLR  R22
000128 2777      	CLR  R23
000129 940e 062a 	CALL __CDF1
00012b 940e 0776 	CALL __PUTDP1
                 ; 0000 0070                     index++;
00012d 01f3      	MOVW R30,R6
00012e 9631      	ADIW R30,1
00012f 013f      	MOVW R6,R30
                 ; 0000 0071                 }
                 _0x15:
                 _0x13:
                 ; 0000 0072             }
                 ; 0000 0073         }
                 _0xC:
                 _0xB:
                 ; 0000 0074     }
                 _0x6:
000130 cf57      	RJMP _0x3
                 ; 0000 0075 }
                 _0x16:
000131 cfff      	RJMP _0x16
                 ; .FEND
                 
                 	.DSEG
                 _0x11:
000260           	.BYTE 0x6
                 ;
                 ;void calculate()
                 ; 0000 0078 {
                 
                 	.CSEG
                 _calculate:
                 ; .FSTART _calculate
                 ; 0000 0079     for (i = 0; i < index; i++)
000132 24cc      	CLR  R12
000133 24dd      	CLR  R13
                 _0x18:
                +
000134 14c6     +CP R12 , R6
000135 04d7     +CPC R13 , R7
                 	__CPWRR 12,13,6,7
000136 f00c      	BRLT PC+2
000137 c086      	RJMP _0x19
                 ; 0000 007A     {
                 ; 0000 007B         if (opert[i] == '+' || opert[i] == '-')
000138 01f6      	MOVW R30,R12
000139 940e 0505 	CALL SUBOPT_0x2
00013b 940e 050a 	CALL SUBOPT_0x3
00013d 940e 050f 	CALL SUBOPT_0x4
00013f f019      	BREQ _0x1B
000140 940e 0517 	CALL SUBOPT_0x5
000142 f409      	BRNE _0x1A
                 _0x1B:
                 ; 0000 007C             continue;
000143 c076      	RJMP _0x17
                 ; 0000 007D         if (opert[i] == '/')
                 _0x1A:
000144 01f6      	MOVW R30,R12
000145 940e 0505 	CALL SUBOPT_0x2
000147 940e 050a 	CALL SUBOPT_0x3
                +
000149 30e0     +CPI R30 , LOW ( 0x423C0000 )
00014a e0a0     +LDI R26 , HIGH ( 0x423C0000 )
00014b 07fa     +CPC R31 , R26
00014c e3ac     +LDI R26 , BYTE3 ( 0x423C0000 )
00014d 076a     +CPC R22 , R26
00014e e4a2     +LDI R26 , BYTE4 ( 0x423C0000 )
00014f 077a     +CPC R23 , R26
                 	__CPD1N 0x423C0000
000150 f521      	BRNE _0x1D
                 ; 0000 007E         {
                 ; 0000 007F             if (number[i + 1] == 0)
000151 940e 051f 	CALL SUBOPT_0x6
000153 940e 0791 	CALL __CPD10
000155 f439      	BRNE _0x1E
                 ; 0000 0080                 error = 1;
000156 e0e1      	LDI  R30,LOW(1)
000157 e0f0      	LDI  R31,HIGH(1)
000158 93e0 02cc 	STS  _error,R30
00015a 93f0 02cd 	STS  _error+1,R31
                 ; 0000 0081             else
00015c c017      	RJMP _0x1F
                 _0x1E:
                 ; 0000 0082                 number[i] /= number[i + 1];
00015d 940e 0527 	CALL SUBOPT_0x7
00015f 93ff      	PUSH R31
000160 93ef      	PUSH R30
000161 01df      	MOVW R26,R30
000162 940e 0770 	CALL __GETD1P
000164 937f      	PUSH R23
000165 936f      	PUSH R22
000166 93ff      	PUSH R31
000167 93ef      	PUSH R30
000168 940e 051f 	CALL SUBOPT_0x6
00016a 91af      	POP  R26
00016b 91bf      	POP  R27
00016c 918f      	POP  R24
00016d 919f      	POP  R25
00016e 940e 0702 	CALL __DIVF21
000170 91af      	POP  R26
000171 91bf      	POP  R27
000172 940e 0776 	CALL __PUTDP1
                 ; 0000 0083         }
                 _0x1F:
                 ; 0000 0084         else if (opert[i] == '*')
000174 c024      	RJMP _0x20
                 _0x1D:
000175 01f6      	MOVW R30,R12
000176 940e 0505 	CALL SUBOPT_0x2
000178 940e 050a 	CALL SUBOPT_0x3
                +
00017a 30e0     +CPI R30 , LOW ( 0x42280000 )
00017b e0a0     +LDI R26 , HIGH ( 0x42280000 )
00017c 07fa     +CPC R31 , R26
00017d e2a8     +LDI R26 , BYTE3 ( 0x42280000 )
00017e 076a     +CPC R22 , R26
00017f e4a2     +LDI R26 , BYTE4 ( 0x42280000 )
000180 077a     +CPC R23 , R26
                 	__CPD1N 0x42280000
000181 f4b9      	BRNE _0x21
                 ; 0000 0085         {
                 ; 0000 0086             number[i] *= number[i + 1];
000182 940e 0527 	CALL SUBOPT_0x7
000184 93ff      	PUSH R31
000185 93ef      	PUSH R30
000186 01df      	MOVW R26,R30
000187 940e 0770 	CALL __GETD1P
000189 937f      	PUSH R23
00018a 936f      	PUSH R22
00018b 93ff      	PUSH R31
00018c 93ef      	PUSH R30
00018d 940e 051f 	CALL SUBOPT_0x6
00018f 91af      	POP  R26
000190 91bf      	POP  R27
000191 918f      	POP  R24
000192 919f      	POP  R25
000193 940e 06b4 	CALL __MULF12
000195 91af      	POP  R26
000196 91bf      	POP  R27
000197 940e 0776 	CALL __PUTDP1
                 ; 0000 0087         }
                 ; 0000 0088         counter--;
                 _0x21:
                 _0x20:
000199 940e 052f 	CALL SUBOPT_0x8
                 ; 0000 0089         index--;
                 ; 0000 008A         for (j = i + 1; j < counter + 1; j++)
                 _0x23:
00019b 940e 053c 	CALL SUBOPT_0x9
00019d f43c      	BRGE _0x24
                 ; 0000 008B         {
                 ; 0000 008C             number[j] = number[j + 1];
00019e 940e 0545 	CALL SUBOPT_0xA
0001a0 940e 054a 	CALL SUBOPT_0xB
                 ; 0000 008D         }
0001a2 940e 055f 	CALL SUBOPT_0xC
0001a4 cff6      	RJMP _0x23
                 _0x24:
                 ; 0000 008E         for (j = i; j < index; j++)
                +
0001a5 92c0 02ca+STS _j + ( 0 ) , R12
0001a7 92d0 02cb+STS _j + ( 0 ) + 1 , R13
                 	__PUTWMRN _j,0,12,13
                 _0x26:
0001a9 940e 0567 	CALL SUBOPT_0xD
0001ab 15a6      	CP   R26,R6
0001ac 05b7      	CPC  R27,R7
0001ad f44c      	BRGE _0x27
                 ; 0000 008F         {
                 ; 0000 0090             opert[j] = opert[j + 1];
0001ae 940e 0545 	CALL SUBOPT_0xA
0001b0 940e 0505 	CALL SUBOPT_0x2
0001b2 940e 056c 	CALL SUBOPT_0xE
                 ; 0000 0091         }
0001b4 940e 055f 	CALL SUBOPT_0xC
0001b6 cff2      	RJMP _0x26
                 _0x27:
                 ; 0000 0092         i--;
0001b7 01f6      	MOVW R30,R12
0001b8 9731      	SBIW R30,1
0001b9 016f      	MOVW R12,R30
                 ; 0000 0093     }
                 _0x17:
0001ba 01f6      	MOVW R30,R12
0001bb 9631      	ADIW R30,1
0001bc 016f      	MOVW R12,R30
0001bd cf76      	RJMP _0x18
                 _0x19:
                 ; 0000 0094     for (i = 0; i < index; i++)
0001be 24cc      	CLR  R12
0001bf 24dd      	CLR  R13
                 _0x29:
                +
0001c0 14c6     +CP R12 , R6
0001c1 04d7     +CPC R13 , R7
                 	__CPWRR 12,13,6,7
0001c2 f00c      	BRLT PC+2
0001c3 c063      	RJMP _0x2A
                 ; 0000 0095     {
                 ; 0000 0096 
                 ; 0000 0097         if (opert[i] == '+')
0001c4 01f6      	MOVW R30,R12
0001c5 940e 0505 	CALL SUBOPT_0x2
0001c7 940e 050a 	CALL SUBOPT_0x3
0001c9 940e 050f 	CALL SUBOPT_0x4
0001cb f4b1      	BRNE _0x2B
                 ; 0000 0098         {
                 ; 0000 0099             number[i] += number[i + 1];
0001cc 940e 0527 	CALL SUBOPT_0x7
0001ce 93ff      	PUSH R31
0001cf 93ef      	PUSH R30
0001d0 01df      	MOVW R26,R30
0001d1 940e 0770 	CALL __GETD1P
0001d3 937f      	PUSH R23
0001d4 936f      	PUSH R22
0001d5 93ff      	PUSH R31
0001d6 93ef      	PUSH R30
0001d7 940e 051f 	CALL SUBOPT_0x6
0001d9 91af      	POP  R26
0001da 91bf      	POP  R27
0001db 918f      	POP  R24
0001dc 919f      	POP  R25
0001dd 940e 0664 	CALL __ADDF12
0001df 91af      	POP  R26
0001e0 91bf      	POP  R27
0001e1 c01f      	RJMP _0x71
                 ; 0000 009A         }
                 ; 0000 009B         else if (opert[i] == '-')
                 _0x2B:
0001e2 01f6      	MOVW R30,R12
0001e3 940e 0505 	CALL SUBOPT_0x2
0001e5 940e 050a 	CALL SUBOPT_0x3
0001e7 940e 0517 	CALL SUBOPT_0x5
0001e9 f4c9      	BRNE _0x2D
                 ; 0000 009C         {
                 ; 0000 009D             number[i] -= number[i + 1];
0001ea 940e 0527 	CALL SUBOPT_0x7
0001ec 93ff      	PUSH R31
0001ed 93ef      	PUSH R30
0001ee 01df      	MOVW R26,R30
0001ef 940e 0770 	CALL __GETD1P
0001f1 937f      	PUSH R23
0001f2 936f      	PUSH R22
0001f3 93ff      	PUSH R31
0001f4 93ef      	PUSH R30
0001f5 940e 051f 	CALL SUBOPT_0x6
0001f7 91af      	POP  R26
0001f8 91bf      	POP  R27
0001f9 918f      	POP  R24
0001fa 919f      	POP  R25
0001fb 940e 0784 	CALL __SWAPD12
0001fd 940e 065d 	CALL __SUBF12
0001ff 91af      	POP  R26
000200 91bf      	POP  R27
                 _0x71:
000201 940e 0776 	CALL __PUTDP1
                 ; 0000 009E         }
                 ; 0000 009F         counter--;
                 _0x2D:
000203 940e 052f 	CALL SUBOPT_0x8
                 ; 0000 00A0         index--;
                 ; 0000 00A1         for (j = i + 1; j < counter + 1; j++)
                 _0x2F:
000205 940e 053c 	CALL SUBOPT_0x9
000207 f43c      	BRGE _0x30
                 ; 0000 00A2         {
                 ; 0000 00A3             number[j] = number[j + 1];
000208 940e 0545 	CALL SUBOPT_0xA
00020a 940e 054a 	CALL SUBOPT_0xB
                 ; 0000 00A4         }
00020c 940e 055f 	CALL SUBOPT_0xC
00020e cff6      	RJMP _0x2F
                 _0x30:
                 ; 0000 00A5         for (j = i; j < index; j++)
                +
00020f 92c0 02ca+STS _j + ( 0 ) , R12
000211 92d0 02cb+STS _j + ( 0 ) + 1 , R13
                 	__PUTWMRN _j,0,12,13
                 _0x32:
000213 940e 0567 	CALL SUBOPT_0xD
000215 15a6      	CP   R26,R6
000216 05b7      	CPC  R27,R7
000217 f44c      	BRGE _0x33
                 ; 0000 00A6         {
                 ; 0000 00A7             opert[j] = opert[j + 1];
000218 940e 0545 	CALL SUBOPT_0xA
00021a 940e 0505 	CALL SUBOPT_0x2
00021c 940e 056c 	CALL SUBOPT_0xE
                 ; 0000 00A8         }
00021e 940e 055f 	CALL SUBOPT_0xC
000220 cff2      	RJMP _0x32
                 _0x33:
                 ; 0000 00A9         i--;
000221 01f6      	MOVW R30,R12
000222 9731      	SBIW R30,1
000223 016f      	MOVW R12,R30
                 ; 0000 00AA     }
000224 9631      	ADIW R30,1
000225 016f      	MOVW R12,R30
000226 cf99      	RJMP _0x29
                 _0x2A:
                 ; 0000 00AB     result = number[0];
000227 91e0 0266 	LDS  R30,_number
000229 91f0 0267 	LDS  R31,_number+1
00022b 9160 0268 	LDS  R22,_number+2
00022d 9170 0269 	LDS  R23,_number+3
00022f 940e 05f3 	CALL __CFD1
000231 015f      	MOVW R10,R30
                 ; 0000 00AC     return;
000232 9508      	RET
                 ; 0000 00AD }
                 ; .FEND
                 ;
                 ;unsigned char keypad_scan()
                 ; 0000 00B0 {
                 _keypad_scan:
                 ; .FSTART _keypad_scan
                 ; 0000 00B1     unsigned char result = 255;
                 ; 0000 00B2 
                 ; 0000 00B3     ////////////////////////  ROW1 ////////////////////////
                 ; 0000 00B4     KEYPAD_R1 = 1;
000233 931a      	ST   -Y,R17
                 ;	result -> R17
000234 ef1f      	LDI  R17,255
000235 9a90      	SBI  0x12,0
                 ; 0000 00B5     KEYPAD_R2 = 0;
000236 9891      	CBI  0x12,1
                 ; 0000 00B6     KEYPAD_R3 = 0;
000237 940e 057a 	CALL SUBOPT_0xF
                 ; 0000 00B7     KEYPAD_R4 = 0;
                 ; 0000 00B8 
                 ; 0000 00B9     delay_ms(5);
                 ; 0000 00BA     if (KEYPAD_C1)
000239 9b84      	SBIS 0x10,4
00023a c002      	RJMP _0x3C
                 ; 0000 00BB         result = KEYPAD_NUM7;
00023b e017      	LDI  R17,LOW(7)
                 ; 0000 00BC     else if (KEYPAD_C2)
00023c c00a      	RJMP _0x3D
                 _0x3C:
00023d 9b85      	SBIS 0x10,5
00023e c002      	RJMP _0x3E
                 ; 0000 00BD         result = KEYPAD_NUM8;
00023f e018      	LDI  R17,LOW(8)
                 ; 0000 00BE     else if (KEYPAD_C3)
000240 c006      	RJMP _0x3F
                 _0x3E:
000241 9b86      	SBIS 0x10,6
000242 c002      	RJMP _0x40
                 ; 0000 00BF         result = KEYPAD_NUM9;
000243 e019      	LDI  R17,LOW(9)
                 ; 0000 00C0     else if (KEYPAD_C4)
000244 c002      	RJMP _0x41
                 _0x40:
000245 9987      	SBIC 0x10,7
                 ; 0000 00C1         result = KEYPAD_DIV;
000246 e21f      	LDI  R17,LOW(47)
                 ; 0000 00C2 
                 ; 0000 00C3     ////////////////////////  ROW2 ////////////////////////
                 ; 0000 00C4     KEYPAD_R1 = 0;
                 _0x41:
                 _0x3F:
                 _0x3D:
000247 9890      	CBI  0x12,0
                 ; 0000 00C5     KEYPAD_R2 = 1;
000248 9a91      	SBI  0x12,1
                 ; 0000 00C6     KEYPAD_R3 = 0;
000249 940e 057a 	CALL SUBOPT_0xF
                 ; 0000 00C7     KEYPAD_R4 = 0;
                 ; 0000 00C8 
                 ; 0000 00C9     delay_ms(5);
                 ; 0000 00CA     if (KEYPAD_C1)
00024b 9b84      	SBIS 0x10,4
00024c c002      	RJMP _0x4B
                 ; 0000 00CB         result = KEYPAD_NUM4;
00024d e014      	LDI  R17,LOW(4)
                 ; 0000 00CC     else if (KEYPAD_C2)
00024e c00a      	RJMP _0x4C
                 _0x4B:
00024f 9b85      	SBIS 0x10,5
000250 c002      	RJMP _0x4D
                 ; 0000 00CD         result = KEYPAD_NUM5;
000251 e015      	LDI  R17,LOW(5)
                 ; 0000 00CE     else if (KEYPAD_C3)
000252 c006      	RJMP _0x4E
                 _0x4D:
000253 9b86      	SBIS 0x10,6
000254 c002      	RJMP _0x4F
                 ; 0000 00CF         result = KEYPAD_NUM6;
000255 e016      	LDI  R17,LOW(6)
                 ; 0000 00D0     else if (KEYPAD_C4)
000256 c002      	RJMP _0x50
                 _0x4F:
000257 9987      	SBIC 0x10,7
                 ; 0000 00D1         result = KEYPAD_MUL;
000258 e21a      	LDI  R17,LOW(42)
                 ; 0000 00D2 
                 ; 0000 00D3     ////////////////////////  ROW3 ////////////////////////
                 ; 0000 00D4     KEYPAD_R1 = 0;
                 _0x50:
                 _0x4E:
                 _0x4C:
000259 9890      	CBI  0x12,0
                 ; 0000 00D5     KEYPAD_R2 = 0;
00025a 9891      	CBI  0x12,1
                 ; 0000 00D6     KEYPAD_R3 = 1;
00025b 9a92      	SBI  0x12,2
                 ; 0000 00D7     KEYPAD_R4 = 0;
00025c 9893      	CBI  0x12,3
                 ; 0000 00D8 
                 ; 0000 00D9     delay_ms(5);
00025d e0a5      	LDI  R26,LOW(5)
00025e e0b0      	LDI  R27,0
00025f 940e 05ba 	CALL _delay_ms
                 ; 0000 00DA     if (KEYPAD_C1)
000261 9b84      	SBIS 0x10,4
000262 c002      	RJMP _0x5A
                 ; 0000 00DB         result = KEYPAD_NUM1;
000263 e011      	LDI  R17,LOW(1)
                 ; 0000 00DC     else if (KEYPAD_C2)
000264 c00a      	RJMP _0x5B
                 _0x5A:
000265 9b85      	SBIS 0x10,5
000266 c002      	RJMP _0x5C
                 ; 0000 00DD         result = KEYPAD_NUM2;
000267 e012      	LDI  R17,LOW(2)
                 ; 0000 00DE     else if (KEYPAD_C3)
000268 c006      	RJMP _0x5D
                 _0x5C:
000269 9b86      	SBIS 0x10,6
00026a c002      	RJMP _0x5E
                 ; 0000 00DF         result = KEYPAD_NUM3;
00026b e013      	LDI  R17,LOW(3)
                 ; 0000 00E0     else if (KEYPAD_C4)
00026c c002      	RJMP _0x5F
                 _0x5E:
00026d 9987      	SBIC 0x10,7
                 ; 0000 00E1         result = KEYPAD_SUB;
00026e e21d      	LDI  R17,LOW(45)
                 ; 0000 00E2 
                 ; 0000 00E3     ////////////////////////  ROW4 ////////////////////////
                 ; 0000 00E4     KEYPAD_R1 = 0;
                 _0x5F:
                 _0x5D:
                 _0x5B:
00026f 9890      	CBI  0x12,0
                 ; 0000 00E5     KEYPAD_R2 = 0;
000270 9891      	CBI  0x12,1
                 ; 0000 00E6     KEYPAD_R3 = 0;
000271 9892      	CBI  0x12,2
                 ; 0000 00E7     KEYPAD_R4 = 1;
000272 9a93      	SBI  0x12,3
                 ; 0000 00E8 
                 ; 0000 00E9     delay_ms(5);
000273 e0a5      	LDI  R26,LOW(5)
000274 e0b0      	LDI  R27,0
000275 940e 05ba 	CALL _delay_ms
                 ; 0000 00EA     if (KEYPAD_C1)
000277 9b84      	SBIS 0x10,4
000278 c002      	RJMP _0x69
                 ; 0000 00EB         result = KEYPAD_ON;
000279 e613      	LDI  R17,LOW(99)
                 ; 0000 00EC     else if (KEYPAD_C2)
00027a c00a      	RJMP _0x6A
                 _0x69:
00027b 9b85      	SBIS 0x10,5
00027c c002      	RJMP _0x6B
                 ; 0000 00ED         result = KEYPAD_NUM0;
00027d e010      	LDI  R17,LOW(0)
                 ; 0000 00EE     else if (KEYPAD_C3)
00027e c006      	RJMP _0x6C
                 _0x6B:
00027f 9b86      	SBIS 0x10,6
000280 c002      	RJMP _0x6D
                 ; 0000 00EF         result = KEYPAD_EQ;
000281 e31d      	LDI  R17,LOW(61)
                 ; 0000 00F0     else if (KEYPAD_C4)
000282 c002      	RJMP _0x6E
                 _0x6D:
000283 9987      	SBIC 0x10,7
                 ; 0000 00F1         result = KEYPAD_ADD;
000284 e21b      	LDI  R17,LOW(43)
                 ; 0000 00F2 
                 ; 0000 00F3     return result;
                 _0x6E:
                 _0x6C:
                 _0x6A:
000285 2fe1      	MOV  R30,R17
000286 9119      	LD   R17,Y+
000287 9508      	RET
                 ; 0000 00F4 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000288 93aa      	ST   -Y,R26
000289 b3eb      	IN   R30,0x1B
00028a 70ef      	ANDI R30,LOW(0xF)
00028b 2fae      	MOV  R26,R30
00028c 81e8      	LD   R30,Y
00028d 7fe0      	ANDI R30,LOW(0xF0)
00028e 2bea      	OR   R30,R26
00028f bbeb      	OUT  0x1B,R30
                +
000290 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000291 958a     +DEC R24
000292 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000293 9ada      	SBI  0x1B,2
                +
000294 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000295 958a     +DEC R24
000296 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000297 98da      	CBI  0x1B,2
                +
000298 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000299 958a     +DEC R24
00029a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00029b c089      	RJMP _0x20C0003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00029c 93aa      	ST   -Y,R26
00029d 81a8      	LD   R26,Y
00029e dfe9      	RCALL __lcd_write_nibble_G100
00029f 81e8          ld    r30,y
0002a0 95e2          swap  r30
0002a1 83e8          st    y,r30
0002a2 81a8      	LD   R26,Y
0002a3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0002a4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002a5 958a     +DEC R24
0002a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002a7 c07d      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002a8 93aa      	ST   -Y,R26
0002a9 81e8      	LD   R30,Y
0002aa e0f0      	LDI  R31,0
0002ab 53e2      	SUBI R30,LOW(-__base_y_G100)
0002ac 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0002ad 81e0      	LD   R30,Z
0002ae 81a9      	LDD  R26,Y+1
0002af 0fae      	ADD  R26,R30
0002b0 dfeb      	RCALL __lcd_write_data
0002b1 81e9      	LDD  R30,Y+1
0002b2 93e0 02d2 	STS  __lcd_x,R30
0002b4 81e8      	LD   R30,Y
0002b5 93e0 02d3 	STS  __lcd_y,R30
0002b7 9622      	ADIW R28,2
0002b8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002b9 e0a2      	LDI  R26,LOW(2)
0002ba 940e 0580 	CALL SUBOPT_0x10
0002bc e0ac      	LDI  R26,LOW(12)
0002bd dfde      	RCALL __lcd_write_data
0002be e0a1      	LDI  R26,LOW(1)
0002bf 940e 0580 	CALL SUBOPT_0x10
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 93e0 02d3 	STS  __lcd_y,R30
0002c4 93e0 02d2 	STS  __lcd_x,R30
0002c6 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002c7 93aa      	ST   -Y,R26
0002c8 81a8      	LD   R26,Y
0002c9 30aa      	CPI  R26,LOW(0xA)
0002ca f031      	BREQ _0x2000005
0002cb 91e0 02d4 	LDS  R30,__lcd_maxx
0002cd 91a0 02d2 	LDS  R26,__lcd_x
0002cf 17ae      	CP   R26,R30
0002d0 f060      	BRLO _0x2000004
                 _0x2000005:
0002d1 e0e0      	LDI  R30,LOW(0)
0002d2 93ea      	ST   -Y,R30
0002d3 91a0 02d3 	LDS  R26,__lcd_y
0002d5 5faf      	SUBI R26,-LOW(1)
0002d6 93a0 02d3 	STS  __lcd_y,R26
0002d8 dfcf      	RCALL _lcd_gotoxy
0002d9 81a8      	LD   R26,Y
0002da 30aa      	CPI  R26,LOW(0xA)
0002db f409      	BRNE _0x2000007
0002dc c048      	RJMP _0x20C0003
                 _0x2000007:
                 _0x2000004:
0002dd 91e0 02d2 	LDS  R30,__lcd_x
0002df 5fef      	SUBI R30,-LOW(1)
0002e0 93e0 02d2 	STS  __lcd_x,R30
0002e2 9ad8      	SBI  0x1B,0
0002e3 81a8      	LD   R26,Y
0002e4 dfb7      	RCALL __lcd_write_data
0002e5 98d8      	CBI  0x1B,0
0002e6 c03e      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002e7 93ba      	ST   -Y,R27
0002e8 93aa      	ST   -Y,R26
0002e9 931a      	ST   -Y,R17
                 _0x2000008:
0002ea 81a9      	LDD  R26,Y+1
0002eb 81ba      	LDD  R27,Y+1+1
0002ec 91ed      	LD   R30,X+
0002ed 83a9      	STD  Y+1,R26
0002ee 83ba      	STD  Y+1+1,R27
0002ef 2f1e      	MOV  R17,R30
0002f0 30e0      	CPI  R30,0
0002f1 f019      	BREQ _0x200000A
0002f2 2fa1      	MOV  R26,R17
0002f3 dfd3      	RCALL _lcd_putchar
0002f4 cff5      	RJMP _0x2000008
                 _0x200000A:
0002f5 8118      	LDD  R17,Y+0
0002f6 9623      	ADIW R28,3
0002f7 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002f8 93aa      	ST   -Y,R26
0002f9 b3ea      	IN   R30,0x1A
0002fa 6fe0      	ORI  R30,LOW(0xF0)
0002fb bbea      	OUT  0x1A,R30
0002fc 9ad2      	SBI  0x1A,2
0002fd 9ad0      	SBI  0x1A,0
0002fe 9ad1      	SBI  0x1A,1
0002ff 98da      	CBI  0x1B,2
000300 98d8      	CBI  0x1B,0
000301 98d9      	CBI  0x1B,1
000302 81e8      	LD   R30,Y
000303 93e0 02d4 	STS  __lcd_maxx,R30
000305 58e0      	SUBI R30,-LOW(128)
                +
000306 93e0 02d0+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000308 81e8      	LD   R30,Y
000309 54e0      	SUBI R30,-LOW(192)
                +
00030a 93e0 02d1+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00030c e1a4      	LDI  R26,LOW(20)
00030d e0b0      	LDI  R27,0
00030e 940e 05ba 	CALL _delay_ms
000310 940e 0586 	CALL SUBOPT_0x11
000312 940e 0586 	CALL SUBOPT_0x11
000314 940e 0586 	CALL SUBOPT_0x11
000316 e2a0      	LDI  R26,LOW(32)
000317 df70      	RCALL __lcd_write_nibble_G100
                +
000318 ec88     +LDI R24 , LOW ( 200 )
000319 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00031a 9701     +SBIW R24 , 1
00031b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00031c e2a8      	LDI  R26,LOW(40)
00031d df7e      	RCALL __lcd_write_data
00031e e0a4      	LDI  R26,LOW(4)
00031f df7c      	RCALL __lcd_write_data
000320 e8a5      	LDI  R26,LOW(133)
000321 df7a      	RCALL __lcd_write_data
000322 e0a6      	LDI  R26,LOW(6)
000323 df78      	RCALL __lcd_write_data
000324 df94      	RCALL _lcd_clear
                 _0x20C0003:
000325 9621      	ADIW R28,1
000326 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
000327 93ba      	ST   -Y,R27
000328 93aa      	ST   -Y,R26
000329 931a      	ST   -Y,R17
00032a 930a      	ST   -Y,R16
00032b 81aa      	LDD  R26,Y+2
00032c 81bb      	LDD  R27,Y+2+1
00032d 9612      	ADIW R26,2
00032e 940e 076c 	CALL __GETW1P
000330 9730      	SBIW R30,0
000331 f159      	BREQ _0x2060010
000332 81aa      	LDD  R26,Y+2
000333 81bb      	LDD  R27,Y+2+1
000334 9614      	ADIW R26,4
000335 940e 076c 	CALL __GETW1P
000337 018f      	MOVW R16,R30
000338 9730      	SBIW R30,0
000339 f061      	BREQ _0x2060012
                +
00033a 3002     +CPI R16 , LOW ( 2 )
00033b e0e0     +LDI R30 , HIGH ( 2 )
00033c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00033d f098      	BRLO _0x2060013
00033e 01f8      	MOVW R30,R16
00033f 9731      	SBIW R30,1
000340 018f      	MOVW R16,R30
                +
000341 81aa     +LDD R26 , Y + 2
000342 81bb     +LDD R27 , Y + 2 + 1
000343 9614     +ADIW R26 , 4
000344 93ed     +ST X + , R30
000345 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
000346 81aa      	LDD  R26,Y+2
000347 81bb      	LDD  R27,Y+2+1
000348 9612      	ADIW R26,2
000349 91ed      	LD   R30,X+
00034a 91fd      	LD   R31,X+
00034b 9631      	ADIW R30,1
00034c 93fe      	ST   -X,R31
00034d 93ee      	ST   -X,R30
00034e 9731      	SBIW R30,1
00034f 81ac      	LDD  R26,Y+4
000350 83a0      	STD  Z+0,R26
                 _0x2060013:
000351 81aa      	LDD  R26,Y+2
000352 81bb      	LDD  R27,Y+2+1
000353 940e 076c 	CALL __GETW1P
000355 23ff      	TST  R31
000356 f02a      	BRMI _0x2060014
000357 91ed      	LD   R30,X+
000358 91fd      	LD   R31,X+
000359 9631      	ADIW R30,1
00035a 93fe      	ST   -X,R31
00035b 93ee      	ST   -X,R30
                 _0x2060014:
00035c c006      	RJMP _0x2060015
                 _0x2060010:
00035d 81aa      	LDD  R26,Y+2
00035e 81bb      	LDD  R27,Y+2+1
00035f efef      	LDI  R30,LOW(65535)
000360 efff      	LDI  R31,HIGH(65535)
000361 93ed      	ST   X+,R30
000362 93fc      	ST   X,R31
                 _0x2060015:
000363 8119      	LDD  R17,Y+1
000364 8108      	LDD  R16,Y+0
000365 c176      	RJMP _0x20C0001
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
000366 93ba      	ST   -Y,R27
000367 93aa      	ST   -Y,R26
000368 9726      	SBIW R28,6
000369 940e 0795 	CALL __SAVELOCR6
00036b e010      	LDI  R17,0
00036c 85ac      	LDD  R26,Y+12
00036d 85bd      	LDD  R27,Y+12+1
00036e e0e0      	LDI  R30,LOW(0)
00036f e0f0      	LDI  R31,HIGH(0)
000370 93ed      	ST   X+,R30
000371 93fc      	ST   X,R31
                 _0x2060016:
000372 89ea      	LDD  R30,Y+18
000373 89fb      	LDD  R31,Y+18+1
000374 9631      	ADIW R30,1
000375 8bea      	STD  Y+18,R30
000376 8bfb      	STD  Y+18+1,R31
000377 9731      	SBIW R30,1
000378 91e4      	LPM  R30,Z
000379 2f2e      	MOV  R18,R30
00037a 30e0      	CPI  R30,0
00037b f409      	BRNE PC+2
00037c c115      	RJMP _0x2060018
00037d 2fe1      	MOV  R30,R17
00037e 30e0      	CPI  R30,0
00037f f439      	BRNE _0x206001C
000380 3225      	CPI  R18,37
000381 f411      	BRNE _0x206001D
000382 e011      	LDI  R17,LOW(1)
000383 c002      	RJMP _0x206001E
                 _0x206001D:
000384 940e 058e 	CALL SUBOPT_0x12
                 _0x206001E:
000386 c10a      	RJMP _0x206001B
                 _0x206001C:
000387 30e1      	CPI  R30,LOW(0x1)
000388 f4a9      	BRNE _0x206001F
000389 3225      	CPI  R18,37
00038a f419      	BRNE _0x2060020
00038b 940e 058e 	CALL SUBOPT_0x12
00038d c102      	RJMP _0x20600CC
                 _0x2060020:
00038e e012      	LDI  R17,LOW(2)
00038f e040      	LDI  R20,LOW(0)
000390 e000      	LDI  R16,LOW(0)
000391 322d      	CPI  R18,45
000392 f411      	BRNE _0x2060021
000393 e001      	LDI  R16,LOW(1)
000394 c0fc      	RJMP _0x206001B
                 _0x2060021:
000395 322b      	CPI  R18,43
000396 f411      	BRNE _0x2060022
000397 e24b      	LDI  R20,LOW(43)
000398 c0f8      	RJMP _0x206001B
                 _0x2060022:
000399 3220      	CPI  R18,32
00039a f411      	BRNE _0x2060023
00039b e240      	LDI  R20,LOW(32)
00039c c0f4      	RJMP _0x206001B
                 _0x2060023:
00039d c002      	RJMP _0x2060024
                 _0x206001F:
00039e 30e2      	CPI  R30,LOW(0x2)
00039f f439      	BRNE _0x2060025
                 _0x2060024:
0003a0 e050      	LDI  R21,LOW(0)
0003a1 e013      	LDI  R17,LOW(3)
0003a2 3320      	CPI  R18,48
0003a3 f411      	BRNE _0x2060026
0003a4 6800      	ORI  R16,LOW(128)
0003a5 c0eb      	RJMP _0x206001B
                 _0x2060026:
0003a6 c003      	RJMP _0x2060027
                 _0x2060025:
0003a7 30e3      	CPI  R30,LOW(0x3)
0003a8 f009      	BREQ PC+2
0003a9 c0e7      	RJMP _0x206001B
                 _0x2060027:
0003aa 3320      	CPI  R18,48
0003ab f010      	BRLO _0x206002A
0003ac 332a      	CPI  R18,58
0003ad f008      	BRLO _0x206002B
                 _0x206002A:
0003ae c007      	RJMP _0x2060029
                 _0x206002B:
0003af e0aa      	LDI  R26,LOW(10)
0003b0 9f5a      	MUL  R21,R26
0003b1 2d50      	MOV  R21,R0
0003b2 2fe2      	MOV  R30,R18
0003b3 53e0      	SUBI R30,LOW(48)
0003b4 0f5e      	ADD  R21,R30
0003b5 c0db      	RJMP _0x206001B
                 _0x2060029:
0003b6 2fe2      	MOV  R30,R18
0003b7 36e3      	CPI  R30,LOW(0x63)
0003b8 f449      	BRNE _0x206002F
0003b9 940e 0595 	CALL SUBOPT_0x13
0003bb 89e8      	LDD  R30,Y+16
0003bc 89f9      	LDD  R31,Y+16+1
0003bd 81a4      	LDD  R26,Z+4
0003be 93aa      	ST   -Y,R26
0003bf 940e 059b 	CALL SUBOPT_0x14
0003c1 c0ce      	RJMP _0x2060030
                 _0x206002F:
0003c2 37e3      	CPI  R30,LOW(0x73)
0003c3 f441      	BRNE _0x2060032
0003c4 940e 0595 	CALL SUBOPT_0x13
0003c6 940e 05a1 	CALL SUBOPT_0x15
0003c8 940e 04de 	CALL _strlen
0003ca 2f1e      	MOV  R17,R30
0003cb c00a      	RJMP _0x2060033
                 _0x2060032:
0003cc 37e0      	CPI  R30,LOW(0x70)
0003cd f461      	BRNE _0x2060035
0003ce 940e 0595 	CALL SUBOPT_0x13
0003d0 940e 05a1 	CALL SUBOPT_0x15
0003d2 940e 04ea 	CALL _strlenf
0003d4 2f1e      	MOV  R17,R30
0003d5 6008      	ORI  R16,LOW(8)
                 _0x2060033:
0003d6 6002      	ORI  R16,LOW(2)
0003d7 770f      	ANDI R16,LOW(127)
0003d8 e030      	LDI  R19,LOW(0)
0003d9 c034      	RJMP _0x2060036
                 _0x2060035:
0003da 36e4      	CPI  R30,LOW(0x64)
0003db f011      	BREQ _0x2060039
0003dc 36e9      	CPI  R30,LOW(0x69)
0003dd f411      	BRNE _0x206003A
                 _0x2060039:
0003de 6004      	ORI  R16,LOW(4)
0003df c002      	RJMP _0x206003B
                 _0x206003A:
0003e0 37e5      	CPI  R30,LOW(0x75)
0003e1 f431      	BRNE _0x206003C
                 _0x206003B:
0003e2 e5e4      	LDI  R30,LOW(_tbl10_G103*2)
0003e3 e0f0      	LDI  R31,HIGH(_tbl10_G103*2)
0003e4 83ee      	STD  Y+6,R30
0003e5 83ff      	STD  Y+6+1,R31
0003e6 e015      	LDI  R17,LOW(5)
0003e7 c00c      	RJMP _0x206003D
                 _0x206003C:
0003e8 35e8      	CPI  R30,LOW(0x58)
0003e9 f411      	BRNE _0x206003F
0003ea 6008      	ORI  R16,LOW(8)
0003eb c003      	RJMP _0x2060040
                 _0x206003F:
0003ec 37e8      	CPI  R30,LOW(0x78)
0003ed f009      	BREQ PC+2
0003ee c0a1      	RJMP _0x2060071
                 _0x2060040:
0003ef e5ee      	LDI  R30,LOW(_tbl16_G103*2)
0003f0 e0f0      	LDI  R31,HIGH(_tbl16_G103*2)
0003f1 83ee      	STD  Y+6,R30
0003f2 83ff      	STD  Y+6+1,R31
0003f3 e014      	LDI  R17,LOW(4)
                 _0x206003D:
0003f4 ff02      	SBRS R16,2
0003f5 c014      	RJMP _0x2060042
0003f6 940e 0595 	CALL SUBOPT_0x13
0003f8 940e 05ab 	CALL SUBOPT_0x16
0003fa 85ab      	LDD  R26,Y+11
0003fb 23aa      	TST  R26
0003fc f43a      	BRPL _0x2060043
0003fd 85ea      	LDD  R30,Y+10
0003fe 85fb      	LDD  R31,Y+10+1
0003ff 940e 074b 	CALL __ANEGW1
000401 87ea      	STD  Y+10,R30
000402 87fb      	STD  Y+10+1,R31
000403 e24d      	LDI  R20,LOW(45)
                 _0x2060043:
000404 3040      	CPI  R20,0
000405 f011      	BREQ _0x2060044
000406 5f1f      	SUBI R17,-LOW(1)
000407 c001      	RJMP _0x2060045
                 _0x2060044:
000408 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000409 c004      	RJMP _0x2060046
                 _0x2060042:
00040a 940e 0595 	CALL SUBOPT_0x13
00040c 940e 05ab 	CALL SUBOPT_0x16
                 _0x2060046:
                 _0x2060036:
00040e fd00      	SBRC R16,0
00040f c011      	RJMP _0x2060047
                 _0x2060048:
000410 1715      	CP   R17,R21
000411 f478      	BRSH _0x206004A
000412 ff07      	SBRS R16,7
000413 c008      	RJMP _0x206004B
000414 ff02      	SBRS R16,2
000415 c004      	RJMP _0x206004C
000416 7f0b      	ANDI R16,LOW(251)
000417 2f24      	MOV  R18,R20
000418 5011      	SUBI R17,LOW(1)
000419 c001      	RJMP _0x206004D
                 _0x206004C:
00041a e320      	LDI  R18,LOW(48)
                 _0x206004D:
00041b c001      	RJMP _0x206004E
                 _0x206004B:
00041c e220      	LDI  R18,LOW(32)
                 _0x206004E:
00041d 940e 058e 	CALL SUBOPT_0x12
00041f 5051      	SUBI R21,LOW(1)
000420 cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
000421 2f31      	MOV  R19,R17
000422 ff01      	SBRS R16,1
000423 c017      	RJMP _0x206004F
                 _0x2060050:
000424 3030      	CPI  R19,0
000425 f0a1      	BREQ _0x2060052
000426 ff03      	SBRS R16,3
000427 c006      	RJMP _0x2060053
000428 81ee      	LDD  R30,Y+6
000429 81ff      	LDD  R31,Y+6+1
00042a 9125      	LPM  R18,Z+
00042b 83ee      	STD  Y+6,R30
00042c 83ff      	STD  Y+6+1,R31
00042d c005      	RJMP _0x2060054
                 _0x2060053:
00042e 81ae      	LDD  R26,Y+6
00042f 81bf      	LDD  R27,Y+6+1
000430 912d      	LD   R18,X+
000431 83ae      	STD  Y+6,R26
000432 83bf      	STD  Y+6+1,R27
                 _0x2060054:
000433 940e 058e 	CALL SUBOPT_0x12
000435 3050      	CPI  R21,0
000436 f009      	BREQ _0x2060055
000437 5051      	SUBI R21,LOW(1)
                 _0x2060055:
000438 5031      	SUBI R19,LOW(1)
000439 cfea      	RJMP _0x2060050
                 _0x2060052:
00043a c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
00043b e320      	LDI  R18,LOW(48)
00043c 81ee      	LDD  R30,Y+6
00043d 81ff      	LDD  R31,Y+6+1
00043e 940e 077b 	CALL __GETW1PF
000440 87e8      	STD  Y+8,R30
000441 87f9      	STD  Y+8+1,R31
000442 81ee      	LDD  R30,Y+6
000443 81ff      	LDD  R31,Y+6+1
000444 9632      	ADIW R30,2
000445 83ee      	STD  Y+6,R30
000446 83ff      	STD  Y+6+1,R31
                 _0x206005A:
000447 85e8      	LDD  R30,Y+8
000448 85f9      	LDD  R31,Y+8+1
000449 85aa      	LDD  R26,Y+10
00044a 85bb      	LDD  R27,Y+10+1
00044b 17ae      	CP   R26,R30
00044c 07bf      	CPC  R27,R31
00044d f050      	BRLO _0x206005C
00044e 5f2f      	SUBI R18,-LOW(1)
00044f 85a8      	LDD  R26,Y+8
000450 85b9      	LDD  R27,Y+8+1
000451 85ea      	LDD  R30,Y+10
000452 85fb      	LDD  R31,Y+10+1
000453 1bea      	SUB  R30,R26
000454 0bfb      	SBC  R31,R27
000455 87ea      	STD  Y+10,R30
000456 87fb      	STD  Y+10+1,R31
000457 cfef      	RJMP _0x206005A
                 _0x206005C:
000458 332a      	CPI  R18,58
000459 f028      	BRLO _0x206005D
00045a ff03      	SBRS R16,3
00045b c002      	RJMP _0x206005E
00045c 5f29      	SUBI R18,-LOW(7)
00045d c001      	RJMP _0x206005F
                 _0x206005E:
00045e 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
00045f fd04      	SBRC R16,4
000460 c01a      	RJMP _0x2060061
000461 3321      	CPI  R18,49
000462 f420      	BRSH _0x2060063
000463 85a8      	LDD  R26,Y+8
000464 85b9      	LDD  R27,Y+8+1
000465 9711      	SBIW R26,1
000466 f409      	BRNE _0x2060062
                 _0x2060063:
000467 c009      	RJMP _0x20600CD
                 _0x2060062:
000468 1753      	CP   R21,R19
000469 f010      	BRLO _0x2060067
00046a ff00      	SBRS R16,0
00046b c001      	RJMP _0x2060068
                 _0x2060067:
00046c c013      	RJMP _0x2060066
                 _0x2060068:
00046d e220      	LDI  R18,LOW(32)
00046e ff07      	SBRS R16,7
00046f c00b      	RJMP _0x2060069
000470 e320      	LDI  R18,LOW(48)
                 _0x20600CD:
000471 6100      	ORI  R16,LOW(16)
000472 ff02      	SBRS R16,2
000473 c007      	RJMP _0x206006A
000474 7f0b      	ANDI R16,LOW(251)
000475 934a      	ST   -Y,R20
000476 940e 059b 	CALL SUBOPT_0x14
000478 3050      	CPI  R21,0
000479 f009      	BREQ _0x206006B
00047a 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
00047b 940e 058e 	CALL SUBOPT_0x12
00047d 3050      	CPI  R21,0
00047e f009      	BREQ _0x206006C
00047f 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
000480 5031      	SUBI R19,LOW(1)
000481 85a8      	LDD  R26,Y+8
000482 85b9      	LDD  R27,Y+8+1
000483 9712      	SBIW R26,2
000484 f008      	BRLO _0x2060059
000485 cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
000486 ff00      	SBRS R16,0
000487 c008      	RJMP _0x206006D
                 _0x206006E:
000488 3050      	CPI  R21,0
000489 f031      	BREQ _0x2060070
00048a 5051      	SUBI R21,LOW(1)
00048b e2e0      	LDI  R30,LOW(32)
00048c 93ea      	ST   -Y,R30
00048d 940e 059b 	CALL SUBOPT_0x14
00048f cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
000490 e010      	LDI  R17,LOW(0)
                 _0x206001B:
000491 cee0      	RJMP _0x2060016
                 _0x2060018:
000492 85ac      	LDD  R26,Y+12
000493 85bd      	LDD  R27,Y+12+1
000494 940e 076c 	CALL __GETW1P
000496 940e 079c 	CALL __LOADLOCR6
000498 9664      	ADIW R28,20
000499 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00049a 92ff      	PUSH R15
00049b 2ef8      	MOV  R15,R24
00049c 9726      	SBIW R28,6
00049d 940e 0797 	CALL __SAVELOCR4
00049f 940e 05b3 	CALL SUBOPT_0x17
0004a1 9730      	SBIW R30,0
0004a2 f419      	BRNE _0x2060072
0004a3 efef      	LDI  R30,LOW(65535)
0004a4 efff      	LDI  R31,HIGH(65535)
0004a5 c023      	RJMP _0x20C0002
                 _0x2060072:
0004a6 01de      	MOVW R26,R28
0004a7 9616      	ADIW R26,6
0004a8 940e 0747 	CALL __ADDW2R15
0004aa 018d      	MOVW R16,R26
0004ab 940e 05b3 	CALL SUBOPT_0x17
0004ad 83ee      	STD  Y+6,R30
0004ae 83ff      	STD  Y+6+1,R31
0004af e0e0      	LDI  R30,LOW(0)
0004b0 87e8      	STD  Y+8,R30
0004b1 87e9      	STD  Y+8+1,R30
0004b2 01de      	MOVW R26,R28
0004b3 961a      	ADIW R26,10
0004b4 940e 0747 	CALL __ADDW2R15
0004b6 940e 076c 	CALL __GETW1P
0004b8 93fa      	ST   -Y,R31
0004b9 93ea      	ST   -Y,R30
0004ba 931a      	ST   -Y,R17
0004bb 930a      	ST   -Y,R16
0004bc e2e7      	LDI  R30,LOW(_put_buff_G103)
0004bd e0f3      	LDI  R31,HIGH(_put_buff_G103)
0004be 93fa      	ST   -Y,R31
0004bf 93ea      	ST   -Y,R30
0004c0 01de      	MOVW R26,R28
0004c1 961a      	ADIW R26,10
0004c2 dea3      	RCALL __print_G103
0004c3 019f      	MOVW R18,R30
0004c4 81ae      	LDD  R26,Y+6
0004c5 81bf      	LDD  R27,Y+6+1
0004c6 e0e0      	LDI  R30,LOW(0)
0004c7 93ec      	ST   X,R30
0004c8 01f9      	MOVW R30,R18
                 _0x20C0002:
0004c9 940e 079e 	CALL __LOADLOCR4
0004cb 962a      	ADIW R28,10
0004cc 90ff      	POP  R15
0004cd 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0004ce 93ba      	ST   -Y,R27
0004cf 93aa      	ST   -Y,R26
0004d0 81b9          ldd  r27,y+1
0004d1 81a8          ld   r26,y
0004d2 9610          adiw r26,0
0004d3 f031          breq memset1
0004d4 81fc          ldd  r31,y+4
0004d5 81eb          ldd  r30,y+3
0004d6 816a          ldd  r22,y+2
                 memset0:
0004d7 9361          st   z+,r22
0004d8 9711          sbiw r26,1
0004d9 f7e9          brne memset0
                 memset1:
0004da 81eb          ldd  r30,y+3
0004db 81fc          ldd  r31,y+4
                 _0x20C0001:
0004dc 9625      	ADIW R28,5
0004dd 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0004de 93ba      	ST   -Y,R27
0004df 93aa      	ST   -Y,R26
0004e0 91a9          ld   r26,y+
0004e1 91b9          ld   r27,y+
0004e2 27ee          clr  r30
0004e3 27ff          clr  r31
                 strlen0:
0004e4 916d          ld   r22,x+
0004e5 2366          tst  r22
0004e6 f011          breq strlen1
0004e7 9631          adiw r30,1
0004e8 cffb          rjmp strlen0
                 strlen1:
0004e9 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004ea 93ba      	ST   -Y,R27
0004eb 93aa      	ST   -Y,R26
0004ec 27aa          clr  r26
0004ed 27bb          clr  r27
0004ee 91e9          ld   r30,y+
0004ef 91f9          ld   r31,y+
                 strlenf0:
0004f0 9005      	lpm  r0,z+
0004f1 2000          tst  r0
0004f2 f011          breq strlenf1
0004f3 9611          adiw r26,1
0004f4 cffb          rjmp strlenf0
                 strlenf1:
0004f5 01fd          movw r30,r26
0004f6 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _number:
000266           	.BYTE 0x28
                 _opert:
00028e           	.BYTE 0x28
                 _result_char:
0002b6           	.BYTE 0x14
                 _j:
0002ca           	.BYTE 0x2
                 _error:
0002cc           	.BYTE 0x2
                 __base_y_G100:
0002ce           	.BYTE 0x4
                 __lcd_x:
0002d2           	.BYTE 0x1
                 __lcd_y:
0002d3           	.BYTE 0x1
                 __lcd_maxx:
0002d4           	.BYTE 0x1
                 __seed_G101:
0002d5           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0004f7 01f2      	MOVW R30,R4
0004f8 e6a6      	LDI  R26,LOW(_number)
0004f9 e0b2      	LDI  R27,HIGH(_number)
0004fa 940e 0757 	CALL __LSLW2
0004fc 0fea      	ADD  R30,R26
0004fd 1ffb      	ADC  R31,R27
0004fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0004ff e0e1      	LDI  R30,LOW(1)
000500 e0f0      	LDI  R31,HIGH(1)
000501 014f      	MOVW R8,R30
000502 2fa1      	MOV  R26,R17
000503 940c 02c7 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2:
000505 e8ae      	LDI  R26,LOW(_opert)
000506 e0b2      	LDI  R27,HIGH(_opert)
000507 940e 0757 	CALL __LSLW2
000509 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00050a 0fae      	ADD  R26,R30
00050b 1fbf      	ADC  R27,R31
00050c 940e 0770 	CALL __GETD1P
00050e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
00050f 30e0     +CPI R30 , LOW ( 0x422C0000 )
000510 e0a0     +LDI R26 , HIGH ( 0x422C0000 )
000511 07fa     +CPC R31 , R26
000512 e2ac     +LDI R26 , BYTE3 ( 0x422C0000 )
000513 076a     +CPC R22 , R26
000514 e4a2     +LDI R26 , BYTE4 ( 0x422C0000 )
000515 077a     +CPC R23 , R26
                 	__CPD1N 0x422C0000
000516 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
                +
000517 30e0     +CPI R30 , LOW ( 0x42340000 )
000518 e0a0     +LDI R26 , HIGH ( 0x42340000 )
000519 07fa     +CPC R31 , R26
00051a e3a4     +LDI R26 , BYTE3 ( 0x42340000 )
00051b 076a     +CPC R22 , R26
00051c e4a2     +LDI R26 , BYTE4 ( 0x42340000 )
00051d 077a     +CPC R23 , R26
                 	__CPD1N 0x42340000
00051e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6:
00051f 01d6      	MOVW R26,R12
000520 940e 075c 	CALL __MULW2_4
                +
000522 59a6     +SUBI R26 , LOW ( - _number - ( 4 ) )
000523 4fbd     +SBCI R27 , HIGH ( - _number - ( 4 ) )
                 	__ADDW2MN _number,4
000524 940e 0770 	CALL __GETD1P
000526 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x7:
000527 01f6      	MOVW R30,R12
000528 e6a6      	LDI  R26,LOW(_number)
000529 e0b2      	LDI  R27,HIGH(_number)
00052a 940e 0757 	CALL __LSLW2
00052c 0fea      	ADD  R30,R26
00052d 1ffb      	ADC  R31,R27
00052e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
00052f 01f2      	MOVW R30,R4
000530 9731      	SBIW R30,1
000531 012f      	MOVW R4,R30
000532 01f3      	MOVW R30,R6
000533 9731      	SBIW R30,1
000534 013f      	MOVW R6,R30
000535 01f6      	MOVW R30,R12
000536 9631      	ADIW R30,1
000537 93e0 02ca 	STS  _j,R30
000539 93f0 02cb 	STS  _j+1,R31
00053b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00053c 01f2      	MOVW R30,R4
00053d 9631      	ADIW R30,1
00053e 91a0 02ca 	LDS  R26,_j
000540 91b0 02cb 	LDS  R27,_j+1
000542 17ae      	CP   R26,R30
000543 07bf      	CPC  R27,R31
000544 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000545 91e0 02ca 	LDS  R30,_j
000547 91f0 02cb 	LDS  R31,_j+1
000549 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
00054a e6a6      	LDI  R26,LOW(_number)
00054b e0b2      	LDI  R27,HIGH(_number)
00054c 940e 0757 	CALL __LSLW2
00054e 0fea      	ADD  R30,R26
00054f 1ffb      	ADC  R31,R27
000550 010f      	MOVW R0,R30
000551 91a0 02ca 	LDS  R26,_j
000553 91b0 02cb 	LDS  R27,_j+1
000555 940e 075c 	CALL __MULW2_4
                +
000557 59a6     +SUBI R26 , LOW ( - _number - ( 4 ) )
000558 4fbd     +SBCI R27 , HIGH ( - _number - ( 4 ) )
                 	__ADDW2MN _number,4
000559 940e 0770 	CALL __GETD1P
00055b 01d0      	MOVW R26,R0
00055c 940e 0776 	CALL __PUTDP1
00055e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xC:
00055f ecaa      	LDI  R26,LOW(_j)
000560 e0b2      	LDI  R27,HIGH(_j)
000561 91ed      	LD   R30,X+
000562 91fd      	LD   R31,X+
000563 9631      	ADIW R30,1
000564 93fe      	ST   -X,R31
000565 93ee      	ST   -X,R30
000566 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000567 91a0 02ca 	LDS  R26,_j
000569 91b0 02cb 	LDS  R27,_j+1
00056b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
00056c 0fea      	ADD  R30,R26
00056d 1ffb      	ADC  R31,R27
00056e 010f      	MOVW R0,R30
00056f dff7      	RCALL SUBOPT_0xD
000570 940e 075c 	CALL __MULW2_4
                +
000572 56ae     +SUBI R26 , LOW ( - _opert - ( 4 ) )
000573 4fbd     +SBCI R27 , HIGH ( - _opert - ( 4 ) )
                 	__ADDW2MN _opert,4
000574 940e 0770 	CALL __GETD1P
000576 01d0      	MOVW R26,R0
000577 940e 0776 	CALL __PUTDP1
000579 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00057a 9892      	CBI  0x12,2
00057b 9893      	CBI  0x12,3
00057c e0a5      	LDI  R26,LOW(5)
00057d e0b0      	LDI  R27,0
00057e 940c 05ba 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000580 940e 029c 	CALL __lcd_write_data
000582 e0a3      	LDI  R26,LOW(3)
000583 e0b0      	LDI  R27,0
000584 940c 05ba 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
000586 e3a0      	LDI  R26,LOW(48)
000587 940e 0288 	CALL __lcd_write_nibble_G100
                +
000589 ec88     +LDI R24 , LOW ( 200 )
00058a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00058b 9701     +SBIW R24 , 1
00058c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00058d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x12:
00058e 932a      	ST   -Y,R18
00058f 85ad      	LDD  R26,Y+13
000590 85be      	LDD  R27,Y+13+1
000591 85ef      	LDD  R30,Y+15
000592 89f8      	LDD  R31,Y+15+1
000593 9509      	ICALL
000594 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x13:
000595 89e8      	LDD  R30,Y+16
000596 89f9      	LDD  R31,Y+16+1
000597 9734      	SBIW R30,4
000598 8be8      	STD  Y+16,R30
000599 8bf9      	STD  Y+16+1,R31
00059a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
00059b 85ad      	LDD  R26,Y+13
00059c 85be      	LDD  R27,Y+13+1
00059d 85ef      	LDD  R30,Y+15
00059e 89f8      	LDD  R31,Y+15+1
00059f 9509      	ICALL
0005a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
0005a1 89a8      	LDD  R26,Y+16
0005a2 89b9      	LDD  R27,Y+16+1
0005a3 9614      	ADIW R26,4
0005a4 940e 076c 	CALL __GETW1P
0005a6 83ee      	STD  Y+6,R30
0005a7 83ff      	STD  Y+6+1,R31
0005a8 81ae      	LDD  R26,Y+6
0005a9 81bf      	LDD  R27,Y+6+1
0005aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
0005ab 89a8      	LDD  R26,Y+16
0005ac 89b9      	LDD  R27,Y+16+1
0005ad 9614      	ADIW R26,4
0005ae 940e 076c 	CALL __GETW1P
0005b0 87ea      	STD  Y+10,R30
0005b1 87fb      	STD  Y+10+1,R31
0005b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0005b3 01de      	MOVW R26,R28
0005b4 961c      	ADIW R26,12
0005b5 940e 0747 	CALL __ADDW2R15
0005b7 940e 076c 	CALL __GETW1P
0005b9 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005ba 9610      	adiw r26,0
0005bb f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005bc ed80     +LDI R24 , LOW ( 0x7D0 )
0005bd e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005be 9701     +SBIW R24 , 1
0005bf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005c0 95a8      	wdr
0005c1 9711      	sbiw r26,1
0005c2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005c3 9508      	ret
                 
                 __ROUND_REPACK:
0005c4 2355      	TST  R21
0005c5 f442      	BRPL __REPACK
0005c6 3850      	CPI  R21,0x80
0005c7 f411      	BRNE __ROUND_REPACK0
0005c8 ffe0      	SBRS R30,0
0005c9 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005ca 9631      	ADIW R30,1
0005cb 1f69      	ADC  R22,R25
0005cc 1f79      	ADC  R23,R25
0005cd f06b      	BRVS __REPACK1
                 
                 __REPACK:
0005ce e850      	LDI  R21,0x80
0005cf 2757      	EOR  R21,R23
0005d0 f411      	BRNE __REPACK0
0005d1 935f      	PUSH R21
0005d2 c0cf      	RJMP __ZERORES
                 __REPACK0:
0005d3 3f5f      	CPI  R21,0xFF
0005d4 f031      	BREQ __REPACK1
0005d5 0f66      	LSL  R22
0005d6 0c00      	LSL  R0
0005d7 9557      	ROR  R21
0005d8 9567      	ROR  R22
0005d9 2f75      	MOV  R23,R21
0005da 9508      	RET
                 __REPACK1:
0005db 935f      	PUSH R21
0005dc 2000      	TST  R0
0005dd f00a      	BRMI __REPACK2
0005de c0cf      	RJMP __MAXRES
                 __REPACK2:
0005df c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0005e0 e850      	LDI  R21,0x80
0005e1 2e19      	MOV  R1,R25
0005e2 2215      	AND  R1,R21
0005e3 0f88      	LSL  R24
0005e4 1f99      	ROL  R25
0005e5 2795      	EOR  R25,R21
0005e6 0f55      	LSL  R21
0005e7 9587      	ROR  R24
                 
                 __UNPACK1:
0005e8 e850      	LDI  R21,0x80
0005e9 2e07      	MOV  R0,R23
0005ea 2205      	AND  R0,R21
0005eb 0f66      	LSL  R22
0005ec 1f77      	ROL  R23
0005ed 2775      	EOR  R23,R21
0005ee 0f55      	LSL  R21
0005ef 9567      	ROR  R22
0005f0 9508      	RET
                 
                 __CFD1U:
0005f1 9468      	SET
0005f2 c001      	RJMP __CFD1U0
                 __CFD1:
0005f3 94e8      	CLT
                 __CFD1U0:
0005f4 935f      	PUSH R21
0005f5 dff2      	RCALL __UNPACK1
0005f6 3870      	CPI  R23,0x80
0005f7 f018      	BRLO __CFD10
0005f8 3f7f      	CPI  R23,0xFF
0005f9 f408      	BRCC __CFD10
0005fa c0a7      	RJMP __ZERORES
                 __CFD10:
0005fb e156      	LDI  R21,22
0005fc 1b57      	SUB  R21,R23
0005fd f4aa      	BRPL __CFD11
0005fe 9551      	NEG  R21
0005ff 3058      	CPI  R21,8
000600 f40e      	BRTC __CFD19
000601 3059      	CPI  R21,9
                 __CFD19:
000602 f030      	BRLO __CFD17
000603 efef      	SER  R30
000604 efff      	SER  R31
000605 ef6f      	SER  R22
000606 e77f      	LDI  R23,0x7F
000607 f977      	BLD  R23,7
000608 c01a      	RJMP __CFD15
                 __CFD17:
000609 2777      	CLR  R23
00060a 2355      	TST  R21
00060b f0b9      	BREQ __CFD15
                 __CFD18:
00060c 0fee      	LSL  R30
00060d 1fff      	ROL  R31
00060e 1f66      	ROL  R22
00060f 1f77      	ROL  R23
000610 955a      	DEC  R21
000611 f7d1      	BRNE __CFD18
000612 c010      	RJMP __CFD15
                 __CFD11:
000613 2777      	CLR  R23
                 __CFD12:
000614 3058      	CPI  R21,8
000615 f028      	BRLO __CFD13
000616 2fef      	MOV  R30,R31
000617 2ff6      	MOV  R31,R22
000618 2f67      	MOV  R22,R23
000619 5058      	SUBI R21,8
00061a cff9      	RJMP __CFD12
                 __CFD13:
00061b 2355      	TST  R21
00061c f031      	BREQ __CFD15
                 __CFD14:
00061d 9576      	LSR  R23
00061e 9567      	ROR  R22
00061f 95f7      	ROR  R31
000620 95e7      	ROR  R30
000621 955a      	DEC  R21
000622 f7d1      	BRNE __CFD14
                 __CFD15:
000623 2000      	TST  R0
000624 f40a      	BRPL __CFD16
000625 d129      	RCALL __ANEGD1
                 __CFD16:
000626 915f      	POP  R21
000627 9508      	RET
                 
                 __CDF1U:
000628 9468      	SET
000629 c001      	RJMP __CDF1U0
                 __CDF1:
00062a 94e8      	CLT
                 __CDF1U0:
00062b 9730      	SBIW R30,0
00062c 4060      	SBCI R22,0
00062d 4070      	SBCI R23,0
00062e f0b1      	BREQ __CDF10
00062f 2400      	CLR  R0
000630 f026      	BRTS __CDF11
000631 2377      	TST  R23
000632 f412      	BRPL __CDF11
000633 9400      	COM  R0
000634 d11a      	RCALL __ANEGD1
                 __CDF11:
000635 2e17      	MOV  R1,R23
000636 e17e      	LDI  R23,30
000637 2011      	TST  R1
                 __CDF12:
000638 f032      	BRMI __CDF13
000639 957a      	DEC  R23
00063a 0fee      	LSL  R30
00063b 1fff      	ROL  R31
00063c 1f66      	ROL  R22
00063d 1c11      	ROL  R1
00063e cff9      	RJMP __CDF12
                 __CDF13:
00063f 2fef      	MOV  R30,R31
000640 2ff6      	MOV  R31,R22
000641 2d61      	MOV  R22,R1
000642 935f      	PUSH R21
000643 df8a      	RCALL __REPACK
000644 915f      	POP  R21
                 __CDF10:
000645 9508      	RET
                 
                 __SWAPACC:
000646 934f      	PUSH R20
000647 01af      	MOVW R20,R30
000648 01fd      	MOVW R30,R26
000649 01da      	MOVW R26,R20
00064a 01ab      	MOVW R20,R22
00064b 01bc      	MOVW R22,R24
00064c 01ca      	MOVW R24,R20
00064d 2d40      	MOV  R20,R0
00064e 2c01      	MOV  R0,R1
00064f 2e14      	MOV  R1,R20
000650 914f      	POP  R20
000651 9508      	RET
                 
                 __UADD12:
000652 0fea      	ADD  R30,R26
000653 1ffb      	ADC  R31,R27
000654 1f68      	ADC  R22,R24
000655 9508      	RET
                 
                 __NEGMAN1:
000656 95e0      	COM  R30
000657 95f0      	COM  R31
000658 9560      	COM  R22
000659 5fef      	SUBI R30,-1
00065a 4fff      	SBCI R31,-1
00065b 4f6f      	SBCI R22,-1
00065c 9508      	RET
                 
                 __SUBF12:
00065d 935f      	PUSH R21
00065e df81      	RCALL __UNPACK
00065f 3890      	CPI  R25,0x80
000660 f171      	BREQ __ADDF129
000661 e850      	LDI  R21,0x80
000662 2615      	EOR  R1,R21
                 
000663 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000664 935f      	PUSH R21
000665 df7a      	RCALL __UNPACK
000666 3890      	CPI  R25,0x80
000667 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000668 3870      	CPI  R23,0x80
000669 f121      	BREQ __ADDF128
                 __ADDF121:
00066a 2f57      	MOV  R21,R23
00066b 1b59      	SUB  R21,R25
00066c f12b      	BRVS __ADDF1211
00066d f412      	BRPL __ADDF122
00066e dfd7      	RCALL __SWAPACC
00066f cffa      	RJMP __ADDF121
                 __ADDF122:
000670 3158      	CPI  R21,24
000671 f018      	BRLO __ADDF123
000672 27aa      	CLR  R26
000673 27bb      	CLR  R27
000674 2788      	CLR  R24
                 __ADDF123:
000675 3058      	CPI  R21,8
000676 f028      	BRLO __ADDF124
000677 2fab      	MOV  R26,R27
000678 2fb8      	MOV  R27,R24
000679 2788      	CLR  R24
00067a 5058      	SUBI R21,8
00067b cff9      	RJMP __ADDF123
                 __ADDF124:
00067c 2355      	TST  R21
00067d f029      	BREQ __ADDF126
                 __ADDF125:
00067e 9586      	LSR  R24
00067f 95b7      	ROR  R27
000680 95a7      	ROR  R26
000681 955a      	DEC  R21
000682 f7d9      	BRNE __ADDF125
                 __ADDF126:
000683 2d50      	MOV  R21,R0
000684 2551      	EOR  R21,R1
000685 f072      	BRMI __ADDF127
000686 dfcb      	RCALL __UADD12
000687 f438      	BRCC __ADDF129
000688 9567      	ROR  R22
000689 95f7      	ROR  R31
00068a 95e7      	ROR  R30
00068b 9573      	INC  R23
00068c f413      	BRVC __ADDF129
00068d c020      	RJMP __MAXRES
                 __ADDF128:
00068e dfb7      	RCALL __SWAPACC
                 __ADDF129:
00068f df3e      	RCALL __REPACK
000690 915f      	POP  R21
000691 9508      	RET
                 __ADDF1211:
000692 f7d8      	BRCC __ADDF128
000693 cffb      	RJMP __ADDF129
                 __ADDF127:
000694 1bea      	SUB  R30,R26
000695 0bfb      	SBC  R31,R27
000696 0b68      	SBC  R22,R24
000697 f051      	BREQ __ZERORES
000698 f410      	BRCC __ADDF1210
000699 9400      	COM  R0
00069a dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00069b 2366      	TST  R22
00069c f392      	BRMI __ADDF129
00069d 0fee      	LSL  R30
00069e 1fff      	ROL  R31
00069f 1f66      	ROL  R22
0006a0 957a      	DEC  R23
0006a1 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006a2 27ee      	CLR  R30
0006a3 27ff      	CLR  R31
0006a4 2766      	CLR  R22
0006a5 2777      	CLR  R23
0006a6 915f      	POP  R21
0006a7 9508      	RET
                 
                 __MINRES:
0006a8 efef      	SER  R30
0006a9 efff      	SER  R31
0006aa e76f      	LDI  R22,0x7F
0006ab ef7f      	SER  R23
0006ac 915f      	POP  R21
0006ad 9508      	RET
                 
                 __MAXRES:
0006ae efef      	SER  R30
0006af efff      	SER  R31
0006b0 e76f      	LDI  R22,0x7F
0006b1 e77f      	LDI  R23,0x7F
0006b2 915f      	POP  R21
0006b3 9508      	RET
                 
                 __MULF12:
0006b4 935f      	PUSH R21
0006b5 df2a      	RCALL __UNPACK
0006b6 3870      	CPI  R23,0x80
0006b7 f351      	BREQ __ZERORES
0006b8 3890      	CPI  R25,0x80
0006b9 f341      	BREQ __ZERORES
0006ba 2401      	EOR  R0,R1
0006bb 9408      	SEC
0006bc 1f79      	ADC  R23,R25
0006bd f423      	BRVC __MULF124
0006be f31c      	BRLT __ZERORES
                 __MULF125:
0006bf 2000      	TST  R0
0006c0 f33a      	BRMI __MINRES
0006c1 cfec      	RJMP __MAXRES
                 __MULF124:
0006c2 920f      	PUSH R0
0006c3 931f      	PUSH R17
0006c4 932f      	PUSH R18
0006c5 933f      	PUSH R19
0006c6 934f      	PUSH R20
0006c7 2711      	CLR  R17
0006c8 2722      	CLR  R18
0006c9 2799      	CLR  R25
0006ca 9f68      	MUL  R22,R24
0006cb 01a0      	MOVW R20,R0
0006cc 9f8f      	MUL  R24,R31
0006cd 2d30      	MOV  R19,R0
0006ce 0d41      	ADD  R20,R1
0006cf 1f59      	ADC  R21,R25
0006d0 9f6b      	MUL  R22,R27
0006d1 0d30      	ADD  R19,R0
0006d2 1d41      	ADC  R20,R1
0006d3 1f59      	ADC  R21,R25
0006d4 9f8e      	MUL  R24,R30
0006d5 d027      	RCALL __MULF126
0006d6 9fbf      	MUL  R27,R31
0006d7 d025      	RCALL __MULF126
0006d8 9f6a      	MUL  R22,R26
0006d9 d023      	RCALL __MULF126
0006da 9fbe      	MUL  R27,R30
0006db d01d      	RCALL __MULF127
0006dc 9faf      	MUL  R26,R31
0006dd d01b      	RCALL __MULF127
0006de 9fae      	MUL  R26,R30
0006df 0d11      	ADD  R17,R1
0006e0 1f29      	ADC  R18,R25
0006e1 1f39      	ADC  R19,R25
0006e2 1f49      	ADC  R20,R25
0006e3 1f59      	ADC  R21,R25
0006e4 2fe3      	MOV  R30,R19
0006e5 2ff4      	MOV  R31,R20
0006e6 2f65      	MOV  R22,R21
0006e7 2f52      	MOV  R21,R18
0006e8 914f      	POP  R20
0006e9 913f      	POP  R19
0006ea 912f      	POP  R18
0006eb 911f      	POP  R17
0006ec 900f      	POP  R0
0006ed 2366      	TST  R22
0006ee f02a      	BRMI __MULF122
0006ef 0f55      	LSL  R21
0006f0 1fee      	ROL  R30
0006f1 1fff      	ROL  R31
0006f2 1f66      	ROL  R22
0006f3 c002      	RJMP __MULF123
                 __MULF122:
0006f4 9573      	INC  R23
0006f5 f24b      	BRVS __MULF125
                 __MULF123:
0006f6 decd      	RCALL __ROUND_REPACK
0006f7 915f      	POP  R21
0006f8 9508      	RET
                 
                 __MULF127:
0006f9 0d10      	ADD  R17,R0
0006fa 1d21      	ADC  R18,R1
0006fb 1f39      	ADC  R19,R25
0006fc c002      	RJMP __MULF128
                 __MULF126:
0006fd 0d20      	ADD  R18,R0
0006fe 1d31      	ADC  R19,R1
                 __MULF128:
0006ff 1f49      	ADC  R20,R25
000700 1f59      	ADC  R21,R25
000701 9508      	RET
                 
                 __DIVF21:
000702 935f      	PUSH R21
000703 dedc      	RCALL __UNPACK
000704 3870      	CPI  R23,0x80
000705 f421      	BRNE __DIVF210
000706 2011      	TST  R1
                 __DIVF211:
000707 f40a      	BRPL __DIVF219
000708 cf9f      	RJMP __MINRES
                 __DIVF219:
000709 cfa4      	RJMP __MAXRES
                 __DIVF210:
00070a 3890      	CPI  R25,0x80
00070b f409      	BRNE __DIVF218
                 __DIVF217:
00070c cf95      	RJMP __ZERORES
                 __DIVF218:
00070d 2401      	EOR  R0,R1
00070e 9408      	SEC
00070f 0b97      	SBC  R25,R23
000710 f41b      	BRVC __DIVF216
000711 f3d4      	BRLT __DIVF217
000712 2000      	TST  R0
000713 cff3      	RJMP __DIVF211
                 __DIVF216:
000714 2f79      	MOV  R23,R25
000715 931f      	PUSH R17
000716 932f      	PUSH R18
000717 933f      	PUSH R19
000718 934f      	PUSH R20
000719 2411      	CLR  R1
00071a 2711      	CLR  R17
00071b 2722      	CLR  R18
00071c 2733      	CLR  R19
00071d 2744      	CLR  R20
00071e 2755      	CLR  R21
00071f e290      	LDI  R25,32
                 __DIVF212:
000720 17ae      	CP   R26,R30
000721 07bf      	CPC  R27,R31
000722 0786      	CPC  R24,R22
000723 0741      	CPC  R20,R17
000724 f030      	BRLO __DIVF213
000725 1bae      	SUB  R26,R30
000726 0bbf      	SBC  R27,R31
000727 0b86      	SBC  R24,R22
000728 0b41      	SBC  R20,R17
000729 9408      	SEC
00072a c001      	RJMP __DIVF214
                 __DIVF213:
00072b 9488      	CLC
                 __DIVF214:
00072c 1f55      	ROL  R21
00072d 1f22      	ROL  R18
00072e 1f33      	ROL  R19
00072f 1c11      	ROL  R1
000730 1faa      	ROL  R26
000731 1fbb      	ROL  R27
000732 1f88      	ROL  R24
000733 1f44      	ROL  R20
000734 959a      	DEC  R25
000735 f751      	BRNE __DIVF212
000736 01f9      	MOVW R30,R18
000737 2d61      	MOV  R22,R1
000738 914f      	POP  R20
000739 913f      	POP  R19
00073a 912f      	POP  R18
00073b 911f      	POP  R17
00073c 2366      	TST  R22
00073d f032      	BRMI __DIVF215
00073e 0f55      	LSL  R21
00073f 1fee      	ROL  R30
000740 1fff      	ROL  R31
000741 1f66      	ROL  R22
000742 957a      	DEC  R23
000743 f243      	BRVS __DIVF217
                 __DIVF215:
000744 de7f      	RCALL __ROUND_REPACK
000745 915f      	POP  R21
000746 9508      	RET
                 
                 __ADDW2R15:
000747 2400      	CLR  R0
000748 0daf      	ADD  R26,R15
000749 1db0      	ADC  R27,R0
00074a 9508      	RET
                 
                 __ANEGW1:
00074b 95f1      	NEG  R31
00074c 95e1      	NEG  R30
00074d 40f0      	SBCI R31,0
00074e 9508      	RET
                 
                 __ANEGD1:
00074f 95f0      	COM  R31
000750 9560      	COM  R22
000751 9570      	COM  R23
000752 95e1      	NEG  R30
000753 4fff      	SBCI R31,-1
000754 4f6f      	SBCI R22,-1
000755 4f7f      	SBCI R23,-1
000756 9508      	RET
                 
                 __LSLW2:
000757 0fee      	LSL  R30
000758 1fff      	ROL  R31
000759 0fee      	LSL  R30
00075a 1fff      	ROL  R31
00075b 9508      	RET
                 
                 __MULW2_4:
00075c 0faa      	LSL  R26
00075d 1fbb      	ROL  R27
00075e 0faa      	LSL  R26
00075f 1fbb      	ROL  R27
000760 9508      	RET
                 
                 __CBD1:
000761 2ffe      	MOV  R31,R30
000762 0fff      	ADD  R31,R31
000763 0bff      	SBC  R31,R31
000764 2f6f      	MOV  R22,R31
000765 2f7f      	MOV  R23,R31
000766 9508      	RET
                 
                 __CWD1:
000767 2f6f      	MOV  R22,R31
000768 0f66      	ADD  R22,R22
000769 0b66      	SBC  R22,R22
00076a 2f76      	MOV  R23,R22
00076b 9508      	RET
                 
                 __GETW1P:
00076c 91ed      	LD   R30,X+
00076d 91fc      	LD   R31,X
00076e 9711      	SBIW R26,1
00076f 9508      	RET
                 
                 __GETD1P:
000770 91ed      	LD   R30,X+
000771 91fd      	LD   R31,X+
000772 916d      	LD   R22,X+
000773 917c      	LD   R23,X
000774 9713      	SBIW R26,3
000775 9508      	RET
                 
                 __PUTDP1:
000776 93ed      	ST   X+,R30
000777 93fd      	ST   X+,R31
000778 936d      	ST   X+,R22
000779 937c      	ST   X,R23
00077a 9508      	RET
                 
                 __GETW1PF:
00077b 9005      	LPM  R0,Z+
00077c 91f4      	LPM  R31,Z
00077d 2de0      	MOV  R30,R0
00077e 9508      	RET
                 
                 __PUTPARD1:
00077f 937a      	ST   -Y,R23
000780 936a      	ST   -Y,R22
000781 93fa      	ST   -Y,R31
000782 93ea      	ST   -Y,R30
000783 9508      	RET
                 
                 __SWAPD12:
000784 2e18      	MOV  R1,R24
000785 2f86      	MOV  R24,R22
000786 2d61      	MOV  R22,R1
000787 2e19      	MOV  R1,R25
000788 2f97      	MOV  R25,R23
000789 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00078a 2e1b      	MOV  R1,R27
00078b 2fbf      	MOV  R27,R31
00078c 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00078d 2e1a      	MOV  R1,R26
00078e 2fae      	MOV  R26,R30
00078f 2de1      	MOV  R30,R1
000790 9508      	RET
                 
                 __CPD10:
000791 9730      	SBIW R30,0
000792 4060      	SBCI R22,0
000793 4070      	SBCI R23,0
000794 9508      	RET
                 
                 __SAVELOCR6:
000795 935a      	ST   -Y,R21
                 __SAVELOCR5:
000796 934a      	ST   -Y,R20
                 __SAVELOCR4:
000797 933a      	ST   -Y,R19
                 __SAVELOCR3:
000798 932a      	ST   -Y,R18
                 __SAVELOCR2:
000799 931a      	ST   -Y,R17
00079a 930a      	ST   -Y,R16
00079b 9508      	RET
                 
                 __LOADLOCR6:
00079c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00079d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00079e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00079f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0007a0 8119      	LDD  R17,Y+1
0007a1 8108      	LD   R16,Y
0007a2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  40 r1 :  30 r2 :   0 r3 :   0 r4 :   7 r5 :   1 r6 :  10 r7 :   5 
r8 :   4 r9 :   2 r10:   2 r11:   0 r12:  21 r13:   6 r14:   0 r15:   4 
r16:  34 r17:  64 r18:  41 r19:  20 r20:  31 r21:  80 r22:  69 r23:  55 
r24:  47 r25:  37 r26: 202 r27:  94 r28:  14 r29:   1 r30: 298 r31: 136 
x  :  35 y  : 184 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  24 add   :  17 
adiw  :  33 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  32 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   4 brmi  :   8 brne  :  50 brpl  :   7 brsh  :   3 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 146 
cbi   :  15 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  41 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :  11 cpc   :  23 cpi   :  59 cpse  :   0 dec   :  12 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  25 ld    :  34 ldd   :  81 ldi   : 173 
lds   :  18 lpm   :  14 lsl   :  15 lsr   :   2 mov   :  61 movw  :  64 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   7 out   :  11 pop   :  47 push  :  47 rcall :  42 ret   :  63 
reti  :   0 rjmp  : 126 rol   :  28 ror   :  12 sbc   :   9 sbci  :  14 
sbi   :   9 sbic  :   4 sbis  :  12 sbiw  :  28 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  77 std   :  31 sts   :  17 sub   :   5 subi  :  25 swap  :   1 
tst   :  18 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f46   3834     76   3910   32768  11.9%
[.dseg] 0x000060 0x0002d9      0    121    121    2048   5.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
