;// bavan_divaani-azar 98522211
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;char numbers[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

	.DSEG
;
;unsigned int hour1 = 3;
;unsigned int hour2 = 2;
;unsigned int minute1 = 8;
;unsigned int minute2 = 5;
;unsigned int second1 = 0;
;unsigned int second2 = 0;
;
;char dot = 0x80;
;unsigned int counter = 0;
;
;interrupt[TIM0_COMP] void timer0_comp_isr(void)
; 0000 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0014     counter++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0015     if (counter == 6)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0016         counter = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0017 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;interrupt[TIM1_COMPA] void timer1_compa_isr(void)
; 0000 001A {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001B     second1++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001C 
; 0000 001D     if (second1 % 2 == 0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001E         dot = 0x80;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001F     else
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0020         dot = 0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0021 
; 0000 0022     if (second1 == 10)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0023     {
; 0000 0024         second1 = 0;
;PCODE: $0000002E VOL: 0
; 0000 0025         second2++;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0026         if (second2 == 6)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0027         {
; 0000 0028             second2 = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0029             minute1++;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002A             if (minute1 == 10)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002B             {
; 0000 002C                 minute1 = 0;
;PCODE: $0000003E VOL: 0
; 0000 002D                 minute2++;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002E                 if (minute2 == 6)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 002F                 {
; 0000 0030                     minute2 = 0;
;PCODE: $00000045 VOL: 0
; 0000 0031                     hour1++;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0032                     if (hour1 == 4 && hour2 == 2)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0033                     {
; 0000 0034                         hour1 = 0;
;PCODE: $00000053 VOL: 0
; 0000 0035                         hour2 = 0;
;PCODE: $00000054 VOL: 0
; 0000 0036                     }
; 0000 0037                     else if (hour1 == 10 && hour2 == 0)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0038                     {
; 0000 0039                         hour1 = 0;
;PCODE: $00000060 VOL: 0
; 0000 003A                         hour2++;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003B                     }
; 0000 003C                 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003D             }
;PCODE: $00000067 VOL: 0
; 0000 003E         }
;PCODE: $00000068 VOL: 0
; 0000 003F     }
;PCODE: $00000069 VOL: 0
; 0000 0040 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;// Declare your global variables here
;void main(void)
; 0000 0044 {
;PCODE: $0000006E VOL: 0
; 0000 0045     PORTA = 0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0046     DDRA = 0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0047     PORTB = 0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0048     DDRB = 0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0049     PORTC = 0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 004A     DDRC = 0xFF;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 004B     PORTD = 0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 004C     DDRD = 0xFF;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 004D     TCCR0 = 0x0C;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 004E     TCNT0 = 0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004F     OCR0 = 0x63;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0050     TCCR1A = 0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0051     TCCR1B = 0x0C;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0052     TCNT1H = 0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0053     TCNT1L = 0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0054     ICR1H = 0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0055     ICR1L = 0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0056     OCR1AH = 0x7A;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0057     OCR1AL = 0x12;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0058     OCR1BH = 0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0059     OCR1BL = 0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 005A     TCCR2 = 0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 005B     TCNT2 = 0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 005C     OCR2 = 0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 005D     MCUCR = 0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 005E     MCUCSR = 0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 005F     TIMSK = 0x12;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0060 
; 0000 0061     ACSR = 0x80;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0062     SFIOR = 0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0063 
; 0000 0064 #asm("sei")
;PCODE: $000000A9 VOL: 0
	sei
;PCODE: $000000AA VOL: 0
; 0000 0065 
; 0000 0066     while (1)
;PCODE: $000000AB VOL: 0
; 0000 0067     {
; 0000 0068 
; 0000 0069         switch (counter)
;PCODE: $000000AC VOL: 0
; 0000 006A         {
; 0000 006B 
; 0000 006C         case (0):
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 006D             PORTD = 0b11111110;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006E             PORTC = numbers[hour2];
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 006F             break;
;PCODE: $000000B5 VOL: 0
; 0000 0070 
; 0000 0071         case (1):
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0072             PORTD = 0b11111101;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0073             PORTC = numbers[hour1] | dot;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0074             break;
;PCODE: $000000C1 VOL: 0
; 0000 0075 
; 0000 0076         case (2):
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0077             PORTD = 0b11111011;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0078             PORTC = numbers[minute2];
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0079             break;
;PCODE: $000000CB VOL: 0
; 0000 007A 
; 0000 007B         case (3):
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 007C             PORTD = 0b11110111;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 007D             PORTC = numbers[minute1] | dot;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 007E             break;
;PCODE: $000000D7 VOL: 0
; 0000 007F 
; 0000 0080         case (4):
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0081             PORTD = 0b11101111;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0082             PORTC = numbers[second2];
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0083             break;
;PCODE: $000000E1 VOL: 0
; 0000 0084 
; 0000 0085         case (5):
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0086             PORTD = 0b11011111;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0087             PORTC = numbers[second1] | dot;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0088             break;
;PCODE: $000000ED VOL: 0
; 0000 0089         default:
;PCODE: $000000EE VOL: 0
; 0000 008A             break;
;PCODE: $000000EF VOL: 0
; 0000 008B         }
;PCODE: $000000F0 VOL: 0
; 0000 008C     }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 008D }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
