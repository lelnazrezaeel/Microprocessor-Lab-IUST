;// Bavan Divaani-azar 98522211
;
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;unsigned char CODE[]= {
;    0x00,    //    0002        . . . . . . . .
;    0x00,    //    0003        . . . . . . . .
;    0x00,    //    0004        . . . . . . . .
;    0x00,    //    0005        . . . . . . . .
;    0x00,    //    0006        . . . . . . . .
;    0x00,    //    0007        . . . . . . . .
;    0x00,    //    0008        . . . . . . . .
;    0x00,    //    0002        . . . . . . . .
;    0x00,    //    0003        . . . . . . . .
;    0x00,    //    0004        . . . . . . . .
;    0x00,    //    0005        . . . . . . . .
;    0x00,    //    0006        . . . . . . . .
;    0x00,    //    0007        . . . . . . . .
;    0x00,    //    0008        . . . . . . . .
;    0x7C,    //    0009        . # # # # # . .
;    0x12,    //    000A        . . . # . . # .
;    0x11,    //    000B        . . . # . . . #
;    0x12,    //    000C        . . . # . . # .
;    0x7C,    //    000D        . # # # # # . .
;    0x00,    //    000E        . . . . . . . .
;    0x00,    //    000F        . . . . . . . .
;    0x00,    //    0010        . . . . . . . .
;    0x00,    //    0011        . . . . . . . .
;    0x7F,    //    0012        . # # # # # # #
;    0x49,    //    0013        . # . . # . . #
;    0x49,    //    0014        . # . . # . . #
;    0x49,    //    0015        . # . . # . . #
;    0x36,    //    0016        . . # # . # # .
;    0x00,    //    0017        . . . . . . . .
;    0x00,    //    0018        . . . . . . . .
;    0x00,    //    0019        . . . . . . . .
;    0x3E,    //    001A        . . # # # # # .
;    0x41,    //    001B        . # . . . . . #
;    0x41,    //    001C        . # . . . . . #
;    0x41,    //    001D        . # . . . . . #
;    0x22,    //    001E        . . # . . . # .
;    0x00,    //    001F        . . . . . . . .
;    0x00,    //    0020        . . . . . . . .
;    0x00,    //    0021        . . . . . . . .
;    0x7F,    //    0022        . # # # # # # #
;    0x41,    //    0023        . # . . . . . #
;    0x41,    //    0024        . # . . . . . #
;    0x41,    //    0025        . # . . . . . #
;    0x3E,    //    0026        . . # # # # # .
;    0x00,    //    0027        . . . . . . . .
;    0x00,    //    0028        . . . . . . . .
;    0x00,    //    0029        . . . . . . . .
;    0x00,    //    002A        . . . . . . . .
;    0x00,    //    002B        . . . . . . . .
;    0x7F,    //    002C        . # # # # # # #
;    0x49,    //    002D        . # . . # . . #
;    0x49,    //    002E        . # . . # . . #
;    0x49,    //    002F        . # . . # . . #
;    0x49,    //    0030        . # . . # . . #
;    0x00,    //    0031        . . . . . . . .
;    0x00,    //    0032        . . . . . . . .
;    0x00,    //    0033        . . . . . . . .
;    0x00,    //    0034        . . . . . . . .
;    0x00,    //    0035        . . . . . . . .
;    0x7F,    //    0036        . # # # # # # #
;    0x09,    //    0037        . . . . # . . #
;    0x09,    //    0038        . . . . # . . #
;    0x09,    //    0039        . . . . # . . #
;    0x00,    //    003A        . . . . . . . .
;    0x00,    //    003B        . . . . . . . .
;    0x00,    //    003C        . . . . . . . .
;    0x00,    //    003D        . . . . . . . .
;    0x00,    //    003E        . . . . . . . .
;    0x00,    //    003F        . . . . . . . .
;    0x00,    //    0040        . . . . . . . .
;    0x00,    //    0041        . . . . . . . .
;    0x00,    //    0042        . . . . . . . .
;    0x00,    //    0043        . . . . . . . .
;    0x00,    //    0044        . . . . . . . .
;    0x00,    //    0045        . . . . . . . .
;    0x00,    //    0046        . . . . . . . .
;    0x00,    //    0047        . . . . . . . .
;    };

	.DSEG
;
;unsigned char PORT[16] = {1, 2, 4, 8, 16, 32, 64, 128, 0, 0, 0, 0, 0, 0, 0, 0};
;unsigned int s, col, timer;
;
;void main(void) {
; 0000 005A void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 005B 
; 0000 005C 
; 0000 005D     PORTB=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 005E     DDRB=0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005F 
; 0000 0060     PORTC=0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0061     DDRC=0xFF;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0062 
; 0000 0063     PORTD=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0064     DDRD=0xFF;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0065 
; 0000 0066     while(1) {
;PCODE: $0000001A VOL: 0
; 0000 0067         for(s=8; s<72; s++) {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0068             for(timer=0; timer<4; timer++) {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0069                 for (col=0;col<16;col++) {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006A                     PORTB = PORT[col];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 006B                     PORTC = ~CODE[s+col];
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006C                     delay_ms(1);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 006D                 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 006E 
; 0000 006F                 delay_ms(2);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0070 
; 0000 0071                 for (col=0; col<16; col++) {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0072                     PORTD = PORT[col];
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0073                     PORTC = ~CODE[s+col-8];
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0074                     delay_ms(1);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0075                 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0076             }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0077         }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0078     };
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0079 }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
