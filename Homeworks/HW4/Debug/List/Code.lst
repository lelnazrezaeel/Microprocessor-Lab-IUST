
AVRASM ver. 2.1.30  C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm Tue Nov 01 23:53:17 2022

C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hour1=R4
                 	.DEF _hour1_msb=R5
                 	.DEF _hour2=R6
                 	.DEF _hour2_msb=R7
                 	.DEF _minute1=R8
                 	.DEF _minute1_msb=R9
                 	.DEF _minute2=R10
                 	.DEF _minute2_msb=R11
                 	.DEF _second1=R12
                 	.DEF _second1_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 008b 	JMP  _timer1_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 006c 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0003
00002b 0002      	.DB  0x3,0x0,0x2,0x0
00002c 0008
00002d 0005      	.DB  0x8,0x0,0x5,0x0
00002e 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002f 063f
000030 4f5b
000031 6d66
000032 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000033 6f7f      	.DB  0x7F,0x6F
                 _0x4:
C:\Users\ASUS\Desktop\term_4003\AzRizpar\HW4\Debug\List\Code.asm(1138): warning: .cseg .db misalignment - padding zero byte
000034 0080      	.DB  0x80
                 
                 __GLOBAL_INI_TBL:
000035 000a      	.DW  0x0A
000036 0004      	.DW  0x04
000037 0054      	.DW  __REG_VARS*2
                 
000038 000a      	.DW  0x0A
000039 0260      	.DW  _numbers
00003a 005e      	.DW  _0x3*2
                 
00003b 0001      	.DW  0x01
00003c 026c      	.DW  _dot
00003d 0068      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
00003e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003f 94f8      	CLI
000040 27ee      	CLR  R30
000041 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000042 e0f1      	LDI  R31,1
000043 bffb      	OUT  GICR,R31
000044 bfeb      	OUT  GICR,R30
000045 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 00f5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;// bavan_divaani-azar 98522211
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;char numbers[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
                 
                 	.DSEG
                 ;
                 ;unsigned int hour1 = 3;
                 ;unsigned int hour2 = 2;
                 ;unsigned int minute1 = 8;
                 ;unsigned int minute2 = 5;
                 ;unsigned int second1 = 0;
                 ;unsigned int second2 = 0;
                 ;
                 ;char dot = 0x80;
                 ;unsigned int counter = 0;
                 ;
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
00006c 93aa      	ST   -Y,R26
00006d 93ba      	ST   -Y,R27
00006e 93ea      	ST   -Y,R30
00006f 93fa      	ST   -Y,R31
000070 b7ef      	IN   R30,SREG
000071 93ea      	ST   -Y,R30
                 ; 0000 0014     counter++;
000072 e6ad      	LDI  R26,LOW(_counter)
000073 e0b2      	LDI  R27,HIGH(_counter)
000074 91ed      	LD   R30,X+
000075 91fd      	LD   R31,X+
000076 9631      	ADIW R30,1
000077 93fe      	ST   -X,R31
000078 93ee      	ST   -X,R30
                 ; 0000 0015     if (counter == 6)
000079 91a0 026d 	LDS  R26,_counter
00007b 91b0 026e 	LDS  R27,_counter+1
00007d 9716      	SBIW R26,6
00007e f429      	BRNE _0x5
                 ; 0000 0016         counter = 0;
00007f e0e0      	LDI  R30,LOW(0)
000080 93e0 026d 	STS  _counter,R30
000082 93e0 026e 	STS  _counter+1,R30
                 ; 0000 0017 }
                 _0x5:
000084 91e9      	LD   R30,Y+
000085 bfef      	OUT  SREG,R30
000086 91f9      	LD   R31,Y+
000087 91e9      	LD   R30,Y+
000088 91b9      	LD   R27,Y+
000089 91a9      	LD   R26,Y+
00008a 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt[TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 001A {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00008b 920a      	ST   -Y,R0
00008c 93aa      	ST   -Y,R26
00008d 93ba      	ST   -Y,R27
00008e 93ea      	ST   -Y,R30
00008f 93fa      	ST   -Y,R31
000090 b7ef      	IN   R30,SREG
000091 93ea      	ST   -Y,R30
                 ; 0000 001B     second1++;
000092 01f6      	MOVW R30,R12
000093 9631      	ADIW R30,1
000094 016f      	MOVW R12,R30
                 ; 0000 001C 
                 ; 0000 001D     if (second1 % 2 == 0)
000095 70e1      	ANDI R30,LOW(0x1)
000096 f411      	BRNE _0x6
                 ; 0000 001E         dot = 0x80;
000097 e8e0      	LDI  R30,LOW(128)
000098 c001      	RJMP _0x21
                 ; 0000 001F     else
                 _0x6:
                 ; 0000 0020         dot = 0x00;
000099 e0e0      	LDI  R30,LOW(0)
                 _0x21:
00009a 93e0 026c 	STS  _dot,R30
                 ; 0000 0021 
                 ; 0000 0022     if (second1 == 10)
00009c e0ea      	LDI  R30,LOW(10)
00009d e0f0      	LDI  R31,HIGH(10)
00009e 15ec      	CP   R30,R12
00009f 05fd      	CPC  R31,R13
0000a0 f009      	BREQ PC+2
0000a1 c04b      	RJMP _0x8
                 ; 0000 0023     {
                 ; 0000 0024         second1 = 0;
0000a2 24cc      	CLR  R12
0000a3 24dd      	CLR  R13
                 ; 0000 0025         second2++;
0000a4 e6aa      	LDI  R26,LOW(_second2)
0000a5 e0b2      	LDI  R27,HIGH(_second2)
0000a6 91ed      	LD   R30,X+
0000a7 91fd      	LD   R31,X+
0000a8 9631      	ADIW R30,1
0000a9 93fe      	ST   -X,R31
0000aa 93ee      	ST   -X,R30
                 ; 0000 0026         if (second2 == 6)
0000ab 91a0 026a 	LDS  R26,_second2
0000ad 91b0 026b 	LDS  R27,_second2+1
0000af 9716      	SBIW R26,6
0000b0 f5e1      	BRNE _0x9
                 ; 0000 0027         {
                 ; 0000 0028             second2 = 0;
0000b1 e0e0      	LDI  R30,LOW(0)
0000b2 93e0 026a 	STS  _second2,R30
0000b4 93e0 026b 	STS  _second2+1,R30
                 ; 0000 0029             minute1++;
0000b6 01f4      	MOVW R30,R8
0000b7 9631      	ADIW R30,1
0000b8 014f      	MOVW R8,R30
                 ; 0000 002A             if (minute1 == 10)
0000b9 e0ea      	LDI  R30,LOW(10)
0000ba e0f0      	LDI  R31,HIGH(10)
0000bb 15e8      	CP   R30,R8
0000bc 05f9      	CPC  R31,R9
0000bd f579      	BRNE _0xA
                 ; 0000 002B             {
                 ; 0000 002C                 minute1 = 0;
0000be 2488      	CLR  R8
0000bf 2499      	CLR  R9
                 ; 0000 002D                 minute2++;
0000c0 01f5      	MOVW R30,R10
0000c1 9631      	ADIW R30,1
0000c2 015f      	MOVW R10,R30
                 ; 0000 002E                 if (minute2 == 6)
0000c3 e0e6      	LDI  R30,LOW(6)
0000c4 e0f0      	LDI  R31,HIGH(6)
0000c5 15ea      	CP   R30,R10
0000c6 05fb      	CPC  R31,R11
0000c7 f529      	BRNE _0xB
                 ; 0000 002F                 {
                 ; 0000 0030                     minute2 = 0;
0000c8 24aa      	CLR  R10
0000c9 24bb      	CLR  R11
                 ; 0000 0031                     hour1++;
0000ca 01f2      	MOVW R30,R4
0000cb 9631      	ADIW R30,1
0000cc 012f      	MOVW R4,R30
                 ; 0000 0032                     if (hour1 == 4 && hour2 == 2)
0000cd e0e4      	LDI  R30,LOW(4)
0000ce e0f0      	LDI  R31,HIGH(4)
0000cf 15e4      	CP   R30,R4
0000d0 05f5      	CPC  R31,R5
0000d1 f429      	BRNE _0xD
0000d2 e0e2      	LDI  R30,LOW(2)
0000d3 e0f0      	LDI  R31,HIGH(2)
0000d4 15e6      	CP   R30,R6
0000d5 05f7      	CPC  R31,R7
0000d6 f009      	BREQ _0xE
                 _0xD:
0000d7 c005      	RJMP _0xC
                 _0xE:
                 ; 0000 0033                     {
                 ; 0000 0034                         hour1 = 0;
0000d8 2444      	CLR  R4
0000d9 2455      	CLR  R5
                 ; 0000 0035                         hour2 = 0;
0000da 2466      	CLR  R6
0000db 2477      	CLR  R7
                 ; 0000 0036                     }
                 ; 0000 0037                     else if (hour1 == 10 && hour2 == 0)
0000dc c010      	RJMP _0xF
                 _0xC:
0000dd e0ea      	LDI  R30,LOW(10)
0000de e0f0      	LDI  R31,HIGH(10)
0000df 15e4      	CP   R30,R4
0000e0 05f5      	CPC  R31,R5
0000e1 f421      	BRNE _0x11
0000e2 2400      	CLR  R0
0000e3 1406      	CP   R0,R6
0000e4 0407      	CPC  R0,R7
0000e5 f009      	BREQ _0x12
                 _0x11:
0000e6 c006      	RJMP _0x10
                 _0x12:
                 ; 0000 0038                     {
                 ; 0000 0039                         hour1 = 0;
0000e7 2444      	CLR  R4
0000e8 2455      	CLR  R5
                 ; 0000 003A                         hour2++;
0000e9 01f3      	MOVW R30,R6
0000ea 9631      	ADIW R30,1
0000eb 013f      	MOVW R6,R30
0000ec 9731      	SBIW R30,1
                 ; 0000 003B                     }
                 ; 0000 003C                 }
                 _0x10:
                 _0xF:
                 ; 0000 003D             }
                 _0xB:
                 ; 0000 003E         }
                 _0xA:
                 ; 0000 003F     }
                 _0x9:
                 ; 0000 0040 }
                 _0x8:
0000ed 91e9      	LD   R30,Y+
0000ee bfef      	OUT  SREG,R30
0000ef 91f9      	LD   R31,Y+
0000f0 91e9      	LD   R30,Y+
0000f1 91b9      	LD   R27,Y+
0000f2 91a9      	LD   R26,Y+
0000f3 9009      	LD   R0,Y+
0000f4 9518      	RETI
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;void main(void)
                 ; 0000 0044 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0045     PORTA = 0x00;
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 bbeb      	OUT  0x1B,R30
                 ; 0000 0046     DDRA = 0x00;
0000f7 bbea      	OUT  0x1A,R30
                 ; 0000 0047     PORTB = 0x00;
0000f8 bbe8      	OUT  0x18,R30
                 ; 0000 0048     DDRB = 0x00;
0000f9 bbe7      	OUT  0x17,R30
                 ; 0000 0049     PORTC = 0x00;
0000fa bbe5      	OUT  0x15,R30
                 ; 0000 004A     DDRC = 0xFF;
0000fb efef      	LDI  R30,LOW(255)
0000fc bbe4      	OUT  0x14,R30
                 ; 0000 004B     PORTD = 0x00;
0000fd e0e0      	LDI  R30,LOW(0)
0000fe bbe2      	OUT  0x12,R30
                 ; 0000 004C     DDRD = 0xFF;
0000ff efef      	LDI  R30,LOW(255)
000100 bbe1      	OUT  0x11,R30
                 ; 0000 004D     TCCR0 = 0x0C;
000101 e0ec      	LDI  R30,LOW(12)
000102 bfe3      	OUT  0x33,R30
                 ; 0000 004E     TCNT0 = 0x00;
000103 e0e0      	LDI  R30,LOW(0)
000104 bfe2      	OUT  0x32,R30
                 ; 0000 004F     OCR0 = 0x63;
000105 e6e3      	LDI  R30,LOW(99)
000106 bfec      	OUT  0x3C,R30
                 ; 0000 0050     TCCR1A = 0x00;
000107 e0e0      	LDI  R30,LOW(0)
000108 bdef      	OUT  0x2F,R30
                 ; 0000 0051     TCCR1B = 0x0C;
000109 e0ec      	LDI  R30,LOW(12)
00010a bdee      	OUT  0x2E,R30
                 ; 0000 0052     TCNT1H = 0x00;
00010b e0e0      	LDI  R30,LOW(0)
00010c bded      	OUT  0x2D,R30
                 ; 0000 0053     TCNT1L = 0x00;
00010d bdec      	OUT  0x2C,R30
                 ; 0000 0054     ICR1H = 0x00;
00010e bde7      	OUT  0x27,R30
                 ; 0000 0055     ICR1L = 0x00;
00010f bde6      	OUT  0x26,R30
                 ; 0000 0056     OCR1AH = 0x7A;
000110 e7ea      	LDI  R30,LOW(122)
000111 bdeb      	OUT  0x2B,R30
                 ; 0000 0057     OCR1AL = 0x12;
000112 e1e2      	LDI  R30,LOW(18)
000113 bdea      	OUT  0x2A,R30
                 ; 0000 0058     OCR1BH = 0x00;
000114 e0e0      	LDI  R30,LOW(0)
000115 bde9      	OUT  0x29,R30
                 ; 0000 0059     OCR1BL = 0x00;
000116 bde8      	OUT  0x28,R30
                 ; 0000 005A     TCCR2 = 0x00;
000117 bde5      	OUT  0x25,R30
                 ; 0000 005B     TCNT2 = 0x00;
000118 bde4      	OUT  0x24,R30
                 ; 0000 005C     OCR2 = 0x00;
000119 bde3      	OUT  0x23,R30
                 ; 0000 005D     MCUCR = 0x00;
00011a bfe5      	OUT  0x35,R30
                 ; 0000 005E     MCUCSR = 0x00;
00011b bfe4      	OUT  0x34,R30
                 ; 0000 005F     TIMSK = 0x12;
00011c e1e2      	LDI  R30,LOW(18)
00011d bfe9      	OUT  0x39,R30
                 ; 0000 0060 
                 ; 0000 0061     ACSR = 0x80;
00011e e8e0      	LDI  R30,LOW(128)
00011f b9e8      	OUT  0x8,R30
                 ; 0000 0062     SFIOR = 0x00;
000120 e0e0      	LDI  R30,LOW(0)
000121 bfe0      	OUT  0x30,R30
                 ; 0000 0063 
                 ; 0000 0064 #asm("sei")
000122 9478      	sei
                 ; 0000 0065 
                 ; 0000 0066     while (1)
                 _0x13:
                 ; 0000 0067     {
                 ; 0000 0068 
                 ; 0000 0069         switch (counter)
000123 91e0 026d 	LDS  R30,_counter
000125 91f0 026e 	LDS  R31,_counter+1
                 ; 0000 006A         {
                 ; 0000 006B 
                 ; 0000 006C         case (0):
000127 9730      	SBIW R30,0
000128 f449      	BRNE _0x19
                 ; 0000 006D             PORTD = 0b11111110;
000129 efee      	LDI  R30,LOW(254)
00012a bbe2      	OUT  0x12,R30
                 ; 0000 006E             PORTC = numbers[hour2];
00012b e6a0      	LDI  R26,LOW(_numbers)
00012c e0b2      	LDI  R27,HIGH(_numbers)
00012d 0da6      	ADD  R26,R6
00012e 1db7      	ADC  R27,R7
00012f 91ec      	LD   R30,X
000130 bbe5      	OUT  0x15,R30
                 ; 0000 006F             break;
000131 c03f      	RJMP _0x18
                 ; 0000 0070 
                 ; 0000 0071         case (1):
                 _0x19:
000132 30e1      	CPI  R30,LOW(0x1)
000133 e0a0      	LDI  R26,HIGH(0x1)
000134 07fa      	CPC  R31,R26
000135 f441      	BRNE _0x1A
                 ; 0000 0072             PORTD = 0b11111101;
000136 efed      	LDI  R30,LOW(253)
000137 bbe2      	OUT  0x12,R30
                 ; 0000 0073             PORTC = numbers[hour1] | dot;
000138 e6a0      	LDI  R26,LOW(_numbers)
000139 e0b2      	LDI  R27,HIGH(_numbers)
00013a 0da4      	ADD  R26,R4
00013b 1db5      	ADC  R27,R5
00013c d036      	RCALL SUBOPT_0x0
                 ; 0000 0074             break;
00013d c033      	RJMP _0x18
                 ; 0000 0075 
                 ; 0000 0076         case (2):
                 _0x1A:
00013e 30e2      	CPI  R30,LOW(0x2)
00013f e0a0      	LDI  R26,HIGH(0x2)
000140 07fa      	CPC  R31,R26
000141 f449      	BRNE _0x1B
                 ; 0000 0077             PORTD = 0b11111011;
000142 efeb      	LDI  R30,LOW(251)
000143 bbe2      	OUT  0x12,R30
                 ; 0000 0078             PORTC = numbers[minute2];
000144 e6a0      	LDI  R26,LOW(_numbers)
000145 e0b2      	LDI  R27,HIGH(_numbers)
000146 0daa      	ADD  R26,R10
000147 1dbb      	ADC  R27,R11
000148 91ec      	LD   R30,X
000149 bbe5      	OUT  0x15,R30
                 ; 0000 0079             break;
00014a c026      	RJMP _0x18
                 ; 0000 007A 
                 ; 0000 007B         case (3):
                 _0x1B:
00014b 30e3      	CPI  R30,LOW(0x3)
00014c e0a0      	LDI  R26,HIGH(0x3)
00014d 07fa      	CPC  R31,R26
00014e f441      	BRNE _0x1C
                 ; 0000 007C             PORTD = 0b11110111;
00014f efe7      	LDI  R30,LOW(247)
000150 bbe2      	OUT  0x12,R30
                 ; 0000 007D             PORTC = numbers[minute1] | dot;
000151 e6a0      	LDI  R26,LOW(_numbers)
000152 e0b2      	LDI  R27,HIGH(_numbers)
000153 0da8      	ADD  R26,R8
000154 1db9      	ADC  R27,R9
000155 d01d      	RCALL SUBOPT_0x0
                 ; 0000 007E             break;
000156 c01a      	RJMP _0x18
                 ; 0000 007F 
                 ; 0000 0080         case (4):
                 _0x1C:
000157 30e4      	CPI  R30,LOW(0x4)
000158 e0a0      	LDI  R26,HIGH(0x4)
000159 07fa      	CPC  R31,R26
00015a f459      	BRNE _0x1D
                 ; 0000 0081             PORTD = 0b11101111;
00015b eeef      	LDI  R30,LOW(239)
00015c bbe2      	OUT  0x12,R30
                 ; 0000 0082             PORTC = numbers[second2];
00015d 91e0 026a 	LDS  R30,_second2
00015f 91f0 026b 	LDS  R31,_second2+1
000161 5ae0      	SUBI R30,LOW(-_numbers)
000162 4ffd      	SBCI R31,HIGH(-_numbers)
000163 81e0      	LD   R30,Z
000164 bbe5      	OUT  0x15,R30
                 ; 0000 0083             break;
000165 c00b      	RJMP _0x18
                 ; 0000 0084 
                 ; 0000 0085         case (5):
                 _0x1D:
000166 30e5      	CPI  R30,LOW(0x5)
000167 e0a0      	LDI  R26,HIGH(0x5)
000168 07fa      	CPC  R31,R26
000169 f439      	BRNE _0x1F
                 ; 0000 0086             PORTD = 0b11011111;
00016a edef      	LDI  R30,LOW(223)
00016b bbe2      	OUT  0x12,R30
                 ; 0000 0087             PORTC = numbers[second1] | dot;
00016c e6a0      	LDI  R26,LOW(_numbers)
00016d e0b2      	LDI  R27,HIGH(_numbers)
00016e 0dac      	ADD  R26,R12
00016f 1dbd      	ADC  R27,R13
000170 d002      	RCALL SUBOPT_0x0
                 ; 0000 0088             break;
                 ; 0000 0089         default:
                 _0x1F:
                 ; 0000 008A             break;
                 ; 0000 008B         }
                 _0x18:
                 ; 0000 008C     }
000171 cfb1      	RJMP _0x13
                 ; 0000 008D }
                 _0x20:
000172 cfff      	RJMP _0x20
                 ; .FEND
                 
                 	.DSEG
                 _numbers:
000260           	.BYTE 0xA
                 _second2:
00026a           	.BYTE 0x2
                 _dot:
00026c           	.BYTE 0x1
                 _counter:
00026d           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000173 91ec      	LD   R30,X
000174 91a0 026c 	LDS  R26,_dot
000176 2bea      	OR   R30,R26
000177 bbe5      	OUT  0x15,R30
000178 9508      	RET
                 
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   9 r1 :   1 r2 :   0 r3 :   0 r4 :   7 r5 :   5 r6 :   6 r7 :   4 
r8 :   5 r9 :   3 r10:   5 r11:   3 r12:   5 r13:   3 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   7 r25:   2 r26:  35 r27:  20 r28:   1 r29:   1 r30: 145 r31:  31 
x  :  14 y  :  22 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :   7 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :  12 cpi   :   5 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   0 jmp   :  22 ld    :  19 ldd   :   0 ldi   :  69 
lds   :   9 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   0 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   0 out   :  47 pop   :   0 push  :   0 rcall :   3 ret   :   1 
reti  :   2 rjmp  :  13 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :   0 sts   :   5 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 31 out of 116 (26.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002f2    712     42    754   32768   2.3%
[.dseg] 0x000060 0x00026f      0     15     15    2048   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
